{
  "version": 3,
  "sources": ["src/app/services/user.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { AngularFireDatabase, AngularFireList } from '@angular/fire/compat/database';\nimport { Observable, from, map, switchMap, take } from 'rxjs';\n\nimport {  Database, getDatabase ,onValue, ref } from 'firebase/database';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private dbPath = '/certificates';\n  questionRef: AngularFireList<any>;\n  private dataBase: Database;\n  constructor(private db: AngularFireDatabase, private afAuth: AngularFireAuth, private http: HttpClient) {\n    this.questionRef = db.list(this.dbPath);\n    this.dataBase = getDatabase();\n  }\n\n  getCertificates(uid: string) {\n    return this.db.object(`${this.dbPath}/${uid}`);\n  }\n\n  updateSubscriptionStatus(email: string, status: boolean): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.db.list('/users', ref => ref.orderByChild('email').equalTo(email))\n        .snapshotChanges()\n        .subscribe(snapshot => {\n          if (snapshot.length > 0) {\n            const userId = snapshot[0].key;\n            this.db.object(`/users/${userId}`).update({ subscriptionActive: status })\n              .then(() => {\n                resolve();\n              })\n              .catch(error => {\n                console.error('Error updating subscription status:', error);\n                reject(error);\n              });\n          } else {\n            reject(new Error('User not found in database'));\n          }\n        });\n    });\n  }\n\n  async checkSubscriptionStatus(uid: string): Promise<boolean> {\n    try {\n      const snapshot = await this.db.object(`/users/${uid}/subscriptionActive`).valueChanges().pipe(take(1)).toPromise();\n      return !!snapshot; // Ritorna true se subscriptionActive Ã¨ true, altrimenti false\n    } catch (error) {\n      console.error('Error checking subscription status:', error);\n      return false; // Ritorna false in caso di errore\n    }\n  }\n\n  async getUserDB(uid){\n    try {\n      const snapshot = await this.db.object(`/users/${uid}`).valueChanges().pipe(take(1)).toPromise();\n      return snapshot;\n    } catch (error) {\n      console.error('Error checking subscription status:', error);\n      return false;\n    }\n  }\n\n  getTotalUsersWithPayTrue(): Observable<number> {\n    const usersRef = ref(this.dataBase, '/users');\n    return new Observable<number>(observer => {\n      onValue(usersRef, snapshot => {\n        const users = snapshot.val();\n        if (users) {\n          const count = Object.values(users).filter((user: any) => user.pay === true).length;\n          observer.next(count);\n        } else {\n          observer.next(0);\n        }\n        observer.complete();\n      }, error => {\n        observer.error(error);\n      });\n    });\n  }\n\n  getTotalUsersWithSubscriptionActiveTrue(): Observable<number> {\n    const usersRef = ref(this.dataBase, '/users');\n    return new Observable<number>(observer => {\n      onValue(usersRef, snapshot => {\n        const users = snapshot.val();\n        if (users) {\n          const count = Object.values(users).filter((user: any) => user.subscriptionActive === true).length;\n          observer.next(count);\n        } else {\n          observer.next(0);\n        }\n        observer.complete();\n      }, error => {\n        observer.error(error);\n      });\n    });\n  }\n\n  getUsers(): Observable<any[]> {\n    return this.db.list('/users').snapshotChanges().pipe(\n      map(changes =>\n        changes.map(c => ({ key: c.payload.key, ...(c.payload.val() as {}) }))\n      )\n    );\n  }\n\n  deleteUser(uid: string): Observable<any> {\n    return this.http.post('https://us-central1-testiq-abc9f.cloudfunctions.net/corsDeleteUser ', { uid });\n  }\n}\n\n"],
  "mappings": "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",
  "names": ["UserService", "constructor", "db", "afAuth", "http", "dbPath", "questionRef", "list", "dataBase", "getDatabase", "getCertificates", "uid", "object", "updateSubscriptionStatus", "email", "status", "Promise", "resolve", "reject", "ref", "orderByChild", "equalTo", "snapshotChanges", "subscribe", "snapshot", "length", "userId", "key", "update", "subscriptionActive", "then", "catch", "error", "console", "Error", "checkSubscriptionStatus", "__async", "valueChanges", "pipe", "take", "toPromise", "getUserDB", "getTotalUsersWithPayTrue", "usersRef", "Observable", "observer", "onValue", "users", "val", "count", "Object", "values", "filter", "user", "pay", "next", "complete", "getTotalUsersWithSubscriptionActiveTrue", "getUsers", "map", "changes", "c", "__spreadValues", "payload", "deleteUser", "post", "\u0275\u0275inject", "AngularFireDatabase", "AngularFireAuth", "HttpClient", "factory", "\u0275fac", "providedIn", "_UserService"]
}
