{"version":3,"sources":["node_modules/@firebase/database/dist/index.esm2017.js","node_modules/@firebase/database-compat/dist/index.esm2017.js","node_modules/@angular/fire/fesm2022/angular-fire-compat-database.mjs"],"sourcesContent":["import { _getProvider, getApp, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component, ComponentContainer, Provider } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, stringToByteArray, Sha1, base64, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, getDefaultEmulatorHostnameAndPort, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nconst name = \"@firebase/database\";\nconst version = \"1.0.5\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** The semver (www.semver.org) version of the SDK. */\nlet SDK_VERSION = '';\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\nclass DOMStorageWrapper {\n  /**\r\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n   */\n  constructor(domStorage_) {\n    this.domStorage_ = domStorage_;\n    // Use a prefix to avoid collisions with other stuff saved by the app.\n    this.prefix_ = 'firebase:';\n  }\n  /**\r\n   * @param key - The key to save the value under\r\n   * @param value - The value being stored, or null to remove the key.\r\n   */\n  set(key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n  /**\r\n   * @returns The value that was stored under this key, or null\r\n   */\n  get(key) {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n  remove(key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n  prefixedName_(name) {\n    return this.prefix_ + name;\n  }\n  toString() {\n    return this.domStorage_.toString();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\nclass MemoryStorage {\n  constructor() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n  set(key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n  get(key) {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n  remove(key) {\n    delete this.cache_[key];\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\nconst createStoragefor = function (domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\nconst PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst logClient = new Logger('@firebase/database');\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\nconst LUIDGenerator = function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\nconst sha1 = function (str) {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\nconst buildLogMessage_ = function (...varArgs) {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (Array.isArray(arg) || arg && typeof arg === 'object' &&\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof arg.length === 'number') {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n  return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\nlet logger = null;\n/**\r\n * Flag to check for log availability on first log message\r\n */\nlet firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\nconst enableLogging$1 = function (logger_, persistent) {\n  assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\nconst log = function (...varArgs) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging$1(true);\n    }\n  }\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\nconst logWrapper = function (prefix) {\n  return function (...varArgs) {\n    log(prefix, ...varArgs);\n  };\n};\nconst error = function (...varArgs) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\nconst fatal = function (...varArgs) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\nconst warn = function (...varArgs) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\nconst warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\nconst isInvalidJSONNumber = function (data) {\n  return typeof data === 'number' && (data !== data ||\n  // NaN\n  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);\n};\nconst executeWhenDOMReady = function (fn) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (document.attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      document.attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      window.attachEvent('onload', wrappedFn);\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\nconst MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\nconst MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\nconst nameCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\r\n * @returns {!number} comparison result.\r\n */\nconst stringCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\nconst requireKey = function (key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\n  }\n};\nconst ObjectToUniqueKey = function (obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n  key += '}';\n  return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\nconst splitStringBySize = function (str, segsize) {\n  const len = str.length;\n  if (len <= segsize) {\n    return [str];\n  }\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\nfunction each(obj, fn) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\nconst doubleToIEEE754String = function (v) {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << ebits - 1) - 1;\n  let s, e, f, ln, i;\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\nconst isChromeExtensionContentScript = function () {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\nconst isWindowsStoreApp = function () {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\nfunction errorForServerCode(code, query) {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n  const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error.code = code.toUpperCase();\n  return error;\n}\n/**\r\n * Used to test for integer-looking strings\r\n */\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\nconst INTEGER_32_MIN = -2147483648;\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\nconst INTEGER_32_MAX = 2147483647;\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\nconst tryParseInt = function (str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\nconst exceptionGuard = function (fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\nconst beingCrawled = function () {\n  const userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || '';\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\nconst setTimeoutNonBlocking = function (fn, time) {\n  const timeout = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (typeof timeout === 'number' &&\n  // @ts-ignore Is only defined in Deno environments.\n  typeof Deno !== 'undefined' &&\n  // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n  Deno['unrefTimer']) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && timeout['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    timeout['unref']();\n  }\n  return timeout;\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\nclass AppCheckTokenProvider {\n  constructor(appName_, appCheckProvider) {\n    this.appName_ = appName_;\n    this.appCheckProvider = appCheckProvider;\n    this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({\n      optional: true\n    });\n    if (!this.appCheck) {\n      appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => this.appCheck = appCheck);\n    }\n  }\n  getToken(forceRefresh) {\n    if (!this.appCheck) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n  addTokenChangeListener(listener) {\n    var _a;\n    (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\n  }\n  notifyForInvalidToken() {\n    warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` + 'are invalid. This usually indicates your app was not initialized correctly.');\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\nclass FirebaseAuthTokenProvider {\n  constructor(appName_, firebaseOptions_, authProvider_) {\n    this.appName_ = appName_;\n    this.firebaseOptions_ = firebaseOptions_;\n    this.authProvider_ = authProvider_;\n    this.auth_ = null;\n    this.auth_ = authProvider_.getImmediate({\n      optional: true\n    });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => this.auth_ = auth);\n    }\n  }\n  getToken(forceRefresh) {\n    if (!this.auth_) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n  addTokenChangeListener(listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_.get().then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n  removeTokenChangeListener(listener) {\n    this.authProvider_.get().then(auth => auth.removeAuthTokenListener(listener));\n  }\n  notifyForInvalidToken() {\n    let errorMessage = 'Provided authentication credentials for the app named \"' + this.appName_ + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nlet EmulatorTokenProvider = /*#__PURE__*/(() => {\n  class EmulatorTokenProvider {\n    constructor(accessToken) {\n      this.accessToken = accessToken;\n    }\n    getToken(forceRefresh) {\n      return Promise.resolve({\n        accessToken: this.accessToken\n      });\n    }\n    addTokenChangeListener(listener) {\n      // Invoke the listener immediately to match the behavior in Firebase Auth\n      // (see packages/auth/src/auth.js#L1807)\n      listener(this.accessToken);\n    }\n    removeTokenChangeListener(listener) {}\n    notifyForInvalidToken() {}\n  }\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  EmulatorTokenProvider.OWNER = 'owner';\n\n  /**\r\n   * @license\r\n   * Copyright 2017 Google LLC\r\n   *\r\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   * you may not use this file except in compliance with the License.\r\n   * You may obtain a copy of the License at\r\n   *\r\n   *   http://www.apache.org/licenses/LICENSE-2.0\r\n   *\r\n   * Unless required by applicable law or agreed to in writing, software\r\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   * See the License for the specific language governing permissions and\r\n   * limitations under the License.\r\n   */\n  return EmulatorTokenProvider;\n})();\nconst PROTOCOL_VERSION = '5';\nconst VERSION_PARAM = 'v';\nconst TRANSPORT_SESSION_PARAM = 's';\nconst REFERER_PARAM = 'r';\nconst FORGE_REF = 'f';\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nconst LAST_SESSION_PARAM = 'ls';\nconst APPLICATION_ID_PARAM = 'p';\nconst APP_CHECK_TOKEN_PARAM = 'ac';\nconst WEBSOCKET = 'websocket';\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A class that holds metadata about a Repo object\r\n */\nclass RepoInfo {\n  /**\r\n   * @param host - Hostname portion of the url for the repo\r\n   * @param secure - Whether or not this repo is accessed over ssl\r\n   * @param namespace - The namespace represented by the repo\r\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n   * @param persistenceKey - Override the default session persistence storage key\r\n   */\n  constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false, isUsingEmulator = false) {\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.nodeAdmin = nodeAdmin;\n    this.persistenceKey = persistenceKey;\n    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n    this.isUsingEmulator = isUsingEmulator;\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this._host;\n  }\n  isCacheableHost() {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n  isCustomHost() {\n    return this._domain !== 'firebaseio.com' && this._domain !== 'firebaseio-demo.com';\n  }\n  get host() {\n    return this._host;\n  }\n  set host(newHost) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n  toString() {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n  toURLString() {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams ? `?ns=${this.namespace}` : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\nfunction repoInfoNeedsQueryParam(repoInfo) {\n  return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;\n}\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\nfunction repoInfoConnectionURL(repoInfo, type, params) {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n  let connURL;\n  if (type === WEBSOCKET) {\n    connURL = (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL = (repoInfo.secure ? 'https://' : 'http://') + repoInfo.internalHost + '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n  const pairs = [];\n  each(params, (key, value) => {\n    pairs.push(key + '=' + value);\n  });\n  return connURL + pairs.join('&');\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Tracks a collection of stats.\r\n */\nclass StatsCollection {\n  constructor() {\n    this.counters_ = {};\n  }\n  incrementCounter(name, amount = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n    this.counters_[name] += amount;\n  }\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst collections = {};\nconst reporters = {};\nfunction statsManagerGetCollection(repoInfo) {\n  const hashString = repoInfo.toString();\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n  return collections[hashString];\n}\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\n  const hashString = repoInfo.toString();\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n  return reporters[hashString];\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\nclass PacketReceiver {\n  /**\r\n   * @param onMessage_\r\n   */\n  constructor(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n  closeAfter(responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n  /**\r\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n   * browsers will respond in the same order as the requests we sent\r\n   */\n  handleResponse(requestNum, data) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[this.currentResponseNum];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// URL query parameters associated with longpolling\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n/**\r\n * This class manages a single long-polling connection.\r\n */\nclass BrowserPollConnection {\n  /**\r\n   * @param connId An identifier for this connection, used for logging\r\n   * @param repoInfo The info for the endpoint to send data to.\r\n   * @param applicationId The Firebase App ID for this project.\r\n   * @param appCheckToken The AppCheck token for this client.\r\n   * @param authToken The AuthToken to use for this connection.\r\n   * @param transportSessionId Optional transportSessionid if we are\r\n   * reconnecting for an existing transport session\r\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n   * already created a connection previously\r\n   */\n  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = params => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n  /**\r\n   * @param onMessage - Callback when messages arrive\r\n   * @param onDisconnect - Callback with connection lost.\r\n   */\n  open(onMessage, onDisconnect) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT));\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\n        const [command, arg1, arg2, arg3, arg4] = args;\n        this.incrementIncomingBytes_(args);\n        if (!this.scriptTagHolder) {\n          return; // we closed the connection.\n        }\n        if (this.connectTimeoutTimer_) {\n          clearTimeout(this.connectTimeoutTimer_);\n          this.connectTimeoutTimer_ = null;\n        }\n        this.everConnected_ = true;\n        if (command === FIREBASE_LONGPOLL_START_PARAM) {\n          this.id = arg1;\n          this.password = arg2;\n        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            this.scriptTagHolder.sendNewPolls = false;\n            // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n            this.myPacketOrderer.closeAfter(arg1, () => {\n              this.onClosed_();\n            });\n          } else {\n            this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, (...args) => {\n        const [pN, data] = args;\n        this.incrementIncomingBytes_(args);\n        this.myPacketOrderer.handleResponse(pN, data);\n      }, () => {\n        this.onClosed_();\n      }, this.urlFn);\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n  /**\r\n   * Call this when a handshake has completed successfully and we want to consider the connection established\r\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n  /**\r\n   * Forces long polling to be considered as a potential transport\r\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n  /**\r\n   * Forces longpolling to not be considered as a potential transport\r\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();\n    }\n  }\n  /**\r\n   * No-op for polling\r\n   */\n  markConnectionHealthy() {}\n  /**\r\n   * Stops polling and cleans up the iframe\r\n   */\n  shutdown_() {\n    this.isClosed_ = true;\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n  /**\r\n   * Triggered when this transport is closed\r\n   */\n  onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n  /**\r\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n   * that we've left.\r\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n  /**\r\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n   * broken into chunks (since URLs have a small maximum length).\r\n   * @param data - The JSON data to transmit.\r\n   */\n  send(data) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  }\n  /**\r\n   * This is how we notify the server that we're leaving.\r\n   * We aren't able to send requests with DHTML on a window close event, but we can\r\n   * trigger XHR requests in some browsers (everything but Opera basically).\r\n   */\n  addDisconnectPingFrame(id, pw) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  }\n  /**\r\n   * Used to track the bytes received by this client\r\n   */\n  incrementIncomingBytes_(args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\nclass FirebaseIFrameScriptHolder {\n  /**\r\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n   */\n  constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn;\n    //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n    this.outstandingRequests = new Set();\n    //A queue of the pending segments waiting for transmission to the server.\n    this.pendingSegs = [];\n    //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n    this.currentSerial = Math.floor(Math.random() * 100000000);\n    // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n    this.sendNewPolls = true;\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\r\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n   * actually use.\r\n   */\n  static createIFrame_() {\n    const iframe = document.createElement('iframe');\n    iframe.style.display = 'none';\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (iframe.document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = iframe.document; //others?\n    }\n    return iframe;\n  }\n  /**\r\n   * Cancel all outstanding queries and remove the frame.\r\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n      this.myIFrame.doc.body.textContent = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n  /**\r\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n   * @param id - The ID of this connection\r\n   * @param pw - The password for this connection\r\n   */\n  startLongPoll(id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n  /**\r\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n   * too many outstanding requests and we are still alive.\r\n   *\r\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n   * needed.\r\n   */\n  newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\r\n   * Queue a packet for transmission to the server.\r\n   * @param segnum - A sequential id for this packet segment used for reassembly\r\n   * @param totalsegs - The total number of segments in this packet\r\n   * @param data - The data for this segment.\r\n   */\n  enqueueSegment(segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    });\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n  /**\r\n   * Add a script tag for a regular long-poll request.\r\n   * @param url - The URL of the script tag.\r\n   * @param serial - The serial number of the request.\r\n   */\n  addLongPollTag_(url, serial) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n    this.addTag(url, readyStateCB);\n  }\n  /**\r\n   * Add an arbitrary script tag to the iframe.\r\n   * @param url - The URL for the script tag source.\r\n   * @param loadCB - A callback to be triggered once the script has loaded.\r\n   */\n  addTag(url, loadCB) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = newScript.onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = newScript.readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = newScript.onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\nlet WebSocketConnection = /*#__PURE__*/(() => {\n  class WebSocketConnection {\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n      this.connId = connId;\n      this.applicationId = applicationId;\n      this.appCheckToken = appCheckToken;\n      this.authToken = authToken;\n      this.keepaliveTimer = null;\n      this.frames = null;\n      this.totalFrames = 0;\n      this.bytesSent = 0;\n      this.bytesReceived = 0;\n      this.log_ = logWrapper(this.connId);\n      this.stats_ = statsManagerGetCollection(repoInfo);\n      this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\n      this.nodeAdmin = repoInfo.nodeAdmin;\n    }\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\n      const urlParams = {};\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (!isNodeSdk() && typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      if (transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n      }\n      if (lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = lastSessionId;\n      }\n      if (appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n      }\n      if (applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = applicationId;\n      }\n      return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n    }\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\n    open(onMessage, onDisconnect) {\n      this.onDisconnect = onDisconnect;\n      this.onMessage = onMessage;\n      this.log_('Websocket connecting to ' + this.connURL);\n      this.everConnected_ = false;\n      // Assume failure until proven otherwise.\n      PersistentStorage.set('previous_websocket_failure', true);\n      try {\n        let options;\n        if (isNodeSdk()) {\n          const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n          // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n          options = {\n            headers: {\n              'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n              'X-Firebase-GMPID': this.applicationId || ''\n            }\n          };\n          // If using Node with admin creds, AppCheck-related checks are unnecessary.\n          // Note that we send the credentials here even if they aren't admin credentials, which is\n          // not a problem.\n          // Note that this header is just used to bypass appcheck, and the token should still be sent\n          // through the websocket connection once it is established.\n          if (this.authToken) {\n            options.headers['Authorization'] = `Bearer ${this.authToken}`;\n          }\n          if (this.appCheckToken) {\n            options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n          }\n          // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n          const env = process['env'];\n          const proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n          if (proxy) {\n            options['proxy'] = {\n              origin: proxy\n            };\n          }\n        }\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } catch (e) {\n        this.log_('Error instantiating WebSocket.');\n        const error = e.message || e.data;\n        if (error) {\n          this.log_(error);\n        }\n        this.onClosed_();\n        return;\n      }\n      this.mySock.onopen = () => {\n        this.log_('Websocket connected.');\n        this.everConnected_ = true;\n      };\n      this.mySock.onclose = () => {\n        this.log_('Websocket connection was disconnected.');\n        this.mySock = null;\n        this.onClosed_();\n      };\n      this.mySock.onmessage = m => {\n        this.handleIncomingFrame(m);\n      };\n      this.mySock.onerror = e => {\n        this.log_('WebSocket error.  Closing connection.');\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const error = e.message || e.data;\n        if (error) {\n          this.log_(error);\n        }\n        this.onClosed_();\n      };\n    }\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\n    start() {}\n    static forceDisallow() {\n      WebSocketConnection.forceDisallow_ = true;\n    }\n    static isAvailable() {\n      let isOldAndroid = false;\n      if (typeof navigator !== 'undefined' && navigator.userAgent) {\n        const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n        const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n        if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n          if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n            isOldAndroid = true;\n          }\n        }\n      }\n      return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n    }\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\n    static previouslyFailed() {\n      // If our persistent storage is actually only in-memory storage,\n      // we default to assuming that it previously failed to be safe.\n      return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n    }\n    markConnectionHealthy() {\n      PersistentStorage.remove('previous_websocket_failure');\n    }\n    appendFrame_(data) {\n      this.frames.push(data);\n      if (this.frames.length === this.totalFrames) {\n        const fullMess = this.frames.join('');\n        this.frames = null;\n        const jsonMess = jsonEval(fullMess);\n        //handle the message\n        this.onMessage(jsonMess);\n      }\n    }\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\n    handleNewFrameCount_(frameCount) {\n      this.totalFrames = frameCount;\n      this.frames = [];\n    }\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\n    extractFrameCount_(data) {\n      assert(this.frames === null, 'We already have a frame buffer');\n      // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n      // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n      if (data.length <= 6) {\n        const frameCount = Number(data);\n        if (!isNaN(frameCount)) {\n          this.handleNewFrameCount_(frameCount);\n          return null;\n        }\n      }\n      this.handleNewFrameCount_(1);\n      return data;\n    }\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\n    handleIncomingFrame(mess) {\n      if (this.mySock === null) {\n        return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n      }\n      const data = mess['data'];\n      this.bytesReceived += data.length;\n      this.stats_.incrementCounter('bytes_received', data.length);\n      this.resetKeepAlive();\n      if (this.frames !== null) {\n        // we're buffering\n        this.appendFrame_(data);\n      } else {\n        // try to parse out a frame count, otherwise, assume 1 and process it\n        const remainingData = this.extractFrameCount_(data);\n        if (remainingData !== null) {\n          this.appendFrame_(remainingData);\n        }\n      }\n    }\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\n    send(data) {\n      this.resetKeepAlive();\n      const dataStr = stringify(data);\n      this.bytesSent += dataStr.length;\n      this.stats_.incrementCounter('bytes_sent', dataStr.length);\n      //We can only fit a certain amount in each websocket frame, so we need to split this request\n      //up into multiple pieces if it doesn't fit in one request.\n      const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n      //Send the length header\n      if (dataSegs.length > 1) {\n        this.sendString_(String(dataSegs.length));\n      }\n      //Send the actual data in segments.\n      for (let i = 0; i < dataSegs.length; i++) {\n        this.sendString_(dataSegs[i]);\n      }\n    }\n    shutdown_() {\n      this.isClosed_ = true;\n      if (this.keepaliveTimer) {\n        clearInterval(this.keepaliveTimer);\n        this.keepaliveTimer = null;\n      }\n      if (this.mySock) {\n        this.mySock.close();\n        this.mySock = null;\n      }\n    }\n    onClosed_() {\n      if (!this.isClosed_) {\n        this.log_('WebSocket is closing itself');\n        this.shutdown_();\n        // since this is an internal close, trigger the close listener\n        if (this.onDisconnect) {\n          this.onDisconnect(this.everConnected_);\n          this.onDisconnect = null;\n        }\n      }\n    }\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\n    close() {\n      if (!this.isClosed_) {\n        this.log_('WebSocket is being closed');\n        this.shutdown_();\n      }\n    }\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\n    resetKeepAlive() {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = setInterval(() => {\n        //If there has been no websocket activity for a while, send a no-op\n        if (this.mySock) {\n          this.sendString_('0');\n        }\n        this.resetKeepAlive();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n    }\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\n    sendString_(str) {\n      // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n      // calls for some unknown reason.  We treat these as an error and disconnect.\n      // See https://app.asana.com/0/58926111402292/68021340250410\n      try {\n        this.mySock.send(str);\n      } catch (e) {\n        this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n        setTimeout(this.onClosed_.bind(this), 0);\n      }\n    }\n  }\n  /**\r\n   * Number of response before we consider the connection \"healthy.\"\r\n   */\n\n  /**\r\n   * Time to wait for the connection te become healthy before giving up.\r\n   */\n  WebSocketConnection.responsesRequiredToBeHealthy = 2;\n  WebSocketConnection.healthyTimeout = 30000;\n\n  /**\r\n   * @license\r\n   * Copyright 2017 Google LLC\r\n   *\r\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   * you may not use this file except in compliance with the License.\r\n   * You may obtain a copy of the License at\r\n   *\r\n   *   http://www.apache.org/licenses/LICENSE-2.0\r\n   *\r\n   * Unless required by applicable law or agreed to in writing, software\r\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   * See the License for the specific language governing permissions and\r\n   * limitations under the License.\r\n   */\n  /**\r\n   * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n   * lifecycle.\r\n   *\r\n   * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n   * they are available.\r\n   */\n  return WebSocketConnection;\n})();\nlet TransportManager = /*#__PURE__*/(() => {\n  class TransportManager {\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\n    constructor(repoInfo) {\n      this.initTransports_(repoInfo);\n    }\n    static get ALL_TRANSPORTS() {\n      return [BrowserPollConnection, WebSocketConnection];\n    }\n    /**\r\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n     * TransportManager has already set up transports_\r\n     */\n    static get IS_TRANSPORT_INITIALIZED() {\n      return this.globalTransportInitialized_;\n    }\n    initTransports_(repoInfo) {\n      const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n      let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n      if (repoInfo.webSocketOnly) {\n        if (!isWebSocketsAvailable) {\n          warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n        }\n        isSkipPollConnection = true;\n      }\n      if (isSkipPollConnection) {\n        this.transports_ = [WebSocketConnection];\n      } else {\n        const transports = this.transports_ = [];\n        for (const transport of TransportManager.ALL_TRANSPORTS) {\n          if (transport && transport['isAvailable']()) {\n            transports.push(transport);\n          }\n        }\n        TransportManager.globalTransportInitialized_ = true;\n      }\n    }\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\n    initialTransport() {\n      if (this.transports_.length > 0) {\n        return this.transports_[0];\n      } else {\n        throw new Error('No transports available');\n      }\n    }\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\n    upgradeTransport() {\n      if (this.transports_.length > 1) {\n        return this.transports_[1];\n      } else {\n        return null;\n      }\n    }\n  }\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  TransportManager.globalTransportInitialized_ = false;\n\n  /**\r\n   * @license\r\n   * Copyright 2017 Google LLC\r\n   *\r\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   * you may not use this file except in compliance with the License.\r\n   * You may obtain a copy of the License at\r\n   *\r\n   *   http://www.apache.org/licenses/LICENSE-2.0\r\n   *\r\n   * Unless required by applicable law or agreed to in writing, software\r\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   * See the License for the specific language governing permissions and\r\n   * limitations under the License.\r\n   */\n  // Abort upgrade attempt if it takes longer than 60s.\n  return TransportManager;\n})();\nconst UPGRADE_TIMEOUT = 60000;\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\nconst SERVER_HELLO = 'h';\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\nclass Connection {\n  /**\r\n   * @param id - an id for this connection\r\n   * @param repoInfo_ - the info for the endpoint to connect to\r\n   * @param applicationId_ - the Firebase App ID for this project\r\n   * @param appCheckToken_ - The App Check Token for this device.\r\n   * @param authToken_ - The auth token for this session.\r\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n   */\n  constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.appCheckToken_ = appCheckToken_;\n    this.authToken_ = authToken_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0 /* RealtimeState.CONNECTING */;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\r\n   * Starts a connection attempt\r\n   */\n  start_() {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n    /*\r\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n     * still have the context of your originating frame.\r\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (this.conn_ && this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has received ' + this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (this.conn_ && this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has sent ' + this.conn_.bytesSent + ' bytes.  Leaving connection alive.');\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS));\n    }\n  }\n  nextTransportId_() {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n  disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n  connReceiver_(conn) {\n    return message => {\n      if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n  /**\r\n   * @param dataMsg - An arbitrary data message to be sent to the server\r\n   */\n  sendRequest(dataMsg) {\n    // wrap in a data message envelope and send it on\n    const msg = {\n      t: 'd',\n      d: dataMsg\n    };\n    this.sendData_(msg);\n  }\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n  onSecondaryControl_(controlData) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE];\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n  onSecondaryMessageReceived_(parsedData) {\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n  upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  }\n  proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({\n      t: 'c',\n      d: {\n        t: SWITCH_ACK,\n        d: {}\n      }\n    });\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({\n      t: 'c',\n      d: {\n        t: END_TRANSMISSION,\n        d: {}\n      }\n    });\n    this.tx_ = this.secondaryConn_;\n    this.tryCleanupConnection();\n  }\n  onPrimaryMessageReceived_(parsedData) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data);\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n  onDataMessage_(message) {\n    this.onPrimaryResponse_();\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n  onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n  onControl_(controlData) {\n    const cmd = requireKey(MESSAGE_TYPE, controlData);\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        const handshakePayload = Object.assign({}, payload);\n        if (this.repoInfo_.isUsingEmulator) {\n          // Upon connecting, the emulator will pass the hostname that it's aware of, but we prefer the user's set hostname via `connectDatabaseEmulator` over what the emulator passes.\n          handshakePayload.h = this.repoInfo_.host;\n        }\n        this.onHandshake_(handshakePayload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n  /**\r\n   * @param handshake - The handshake data returned from the server\r\n   */\n  onHandshake_(handshake) {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === 0 /* RealtimeState.CONNECTING */) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n  tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n  startUpgrade_(conn) {\n    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n  onReset_(host) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n  onConnectionEstablished_(conn, timestamp) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = 1 /* RealtimeState.CONNECTED */;\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n  sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === 1 /* RealtimeState.CONNECTED */) {\n      this.log_('sending ping on primary.');\n      this.sendData_({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  }\n  onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n  /**\r\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n   * we should flush the host cache\r\n   */\n  onConnectionLost_(everConnected) {\n    this.conn_ = null;\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === 0 /* RealtimeState.CONNECTING */) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === 1 /* RealtimeState.CONNECTED */) {\n      this.log_('Realtime connection lost.');\n    }\n    this.close();\n  }\n  onConnectionShutdown_(reason) {\n    this.log_('Connection shutdown command received. Shutting down...');\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n    this.close();\n  }\n  sendData_(data) {\n    if (this.state_ !== 1 /* RealtimeState.CONNECTED */) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n  /**\r\n   * Cleans up this connection, calling the appropriate callbacks\r\n   */\n  close() {\n    if (this.state_ !== 2 /* RealtimeState.DISCONNECTED */) {\n      this.log_('Closing realtime connection.');\n      this.state_ = 2 /* RealtimeState.DISCONNECTED */;\n      this.closeConnections_();\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n  closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\nclass ServerActions {\n  put(pathString, data, onComplete, hash) {}\n  merge(pathString, data, onComplete, hash) {}\n  /**\r\n   * Refreshes the auth token for the current connection.\r\n   * @param token - The authentication token\r\n   */\n  refreshAuthToken(token) {}\n  /**\r\n   * Refreshes the app check token for the current connection.\r\n   * @param token The app check token\r\n   */\n  refreshAppCheckToken(token) {}\n  onDisconnectPut(pathString, data, onComplete) {}\n  onDisconnectMerge(pathString, data, onComplete) {}\n  onDisconnectCancel(pathString, onComplete) {}\n  reportStats(stats) {}\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\nclass EventEmitter {\n  constructor(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\r\n   * To be called by derived classes to trigger events.\r\n   */\n  trigger(eventType, ...varArgs) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n  on(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback,\n      context\n    });\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n  off(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n  validateEventType_(eventType) {\n    assert(this.allowedEvents_.find(et => {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\nclass OnlineMonitor extends EventEmitter {\n  constructor() {\n    super(['online']);\n    this.online_ = true;\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !isMobileCordova()) {\n      window.addEventListener('online', () => {\n        if (!this.online_) {\n          this.online_ = true;\n          this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', () => {\n        if (this.online_) {\n          this.online_ = false;\n          this.trigger('online', false);\n        }\n      }, false);\n    }\n  }\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n  getInitialEvent(eventType) {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n  currentlyOnline() {\n    return this.online_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\nclass Path {\n  /**\r\n   * @param pathOrString - Path string to parse, or another path, or the raw\r\n   * tokens array\r\n   */\n  constructor(pathOrString, pieceNum) {\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/');\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n  toString() {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n    return pathString || '/';\n  }\n}\nfunction newEmptyPath() {\n  return new Path('');\n}\nfunction pathGetFront(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n  return path.pieces_[path.pieceNum_];\n}\n/**\r\n * @returns The number of segments in this path\r\n */\nfunction pathGetLength(path) {\n  return path.pieces_.length - path.pieceNum_;\n}\nfunction pathPopFront(path) {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\nfunction pathGetBack(path) {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n  return null;\n}\nfunction pathToUrlEncodedString(path) {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n  return pathString || '/';\n}\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\nfunction pathSlice(path, begin = 0) {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\nfunction pathParent(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n  return new Path(pieces, 0);\n}\nfunction pathChild(path, childPathObj) {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n  return new Path(pieces, 0);\n}\n/**\r\n * @returns True if there are no segments in this path\r\n */\nfunction pathIsEmpty(path) {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\nfunction newRelativePath(outerPath, innerPath) {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n  }\n}\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\nfunction pathCompare(left, right) {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n/**\r\n * @returns true if paths are the same.\r\n */\nfunction pathEquals(path, other) {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n  for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\r\n * @returns True if this path is a parent of (or the same as) other\r\n */\nfunction pathContains(path, other) {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\nclass ValidationPath {\n  /**\r\n   * @param path - Initial Path.\r\n   * @param errorPrefix_ - Prefix for any error messages.\r\n   */\n  constructor(path, errorPrefix_) {\n    this.errorPrefix_ = errorPrefix_;\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\nfunction validationPathPush(validationPath, child) {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\nfunction validationPathPop(validationPath) {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\nfunction validationPathCheckValid(validationPath) {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(validationPath.errorPrefix_ + 'has a key path longer than ' + MAX_PATH_LENGTH_BYTES + ' bytes (' + validationPath.byteLength_ + ').');\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(validationPath.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + MAX_PATH_DEPTH + ') or object contains a cycle ' + validationPathToErrorString(validationPath));\n  }\n}\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\nfunction validationPathToErrorString(validationPath) {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass VisibilityMonitor extends EventEmitter {\n  constructor() {\n    super(['visible']);\n    let hidden;\n    let visibilityChange;\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, () => {\n        const visible = !document[hidden];\n        if (visible !== this.visible_) {\n          this.visible_ = visible;\n          this.trigger('visible', visible);\n        }\n      }, false);\n    }\n  }\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n  getInitialEvent(eventType) {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\nlet PersistentConnection = /*#__PURE__*/(() => {\n  class PersistentConnection extends ServerActions {\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\n      super();\n      this.repoInfo_ = repoInfo_;\n      this.applicationId_ = applicationId_;\n      this.onDataUpdate_ = onDataUpdate_;\n      this.onConnectStatus_ = onConnectStatus_;\n      this.onServerInfoUpdate_ = onServerInfoUpdate_;\n      this.authTokenProvider_ = authTokenProvider_;\n      this.appCheckTokenProvider_ = appCheckTokenProvider_;\n      this.authOverride_ = authOverride_;\n      // Used for diagnostic logging.\n      this.id = PersistentConnection.nextPersistentConnectionId_++;\n      this.log_ = logWrapper('p:' + this.id + ':');\n      this.interruptReasons_ = {};\n      this.listens = new Map();\n      this.outstandingPuts_ = [];\n      this.outstandingGets_ = [];\n      this.outstandingPutCount_ = 0;\n      this.outstandingGetCount_ = 0;\n      this.onDisconnectRequestQueue_ = [];\n      this.connected_ = false;\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n      this.securityDebugCallback_ = null;\n      this.lastSessionId = null;\n      this.establishConnectionTimer_ = null;\n      this.visible_ = false;\n      // Before we get connected, we keep a queue of pending messages to send.\n      this.requestCBHash_ = {};\n      this.requestNumber_ = 0;\n      this.realtime_ = null;\n      this.authToken_ = null;\n      this.appCheckToken_ = null;\n      this.forceTokenRefresh_ = false;\n      this.invalidAuthTokenCount_ = 0;\n      this.invalidAppCheckTokenCount_ = 0;\n      this.firstConnection_ = true;\n      this.lastConnectionAttemptTime_ = null;\n      this.lastConnectionEstablishedTime_ = null;\n      if (authOverride_ && !isNodeSdk()) {\n        throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n      }\n      VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n      if (repoInfo_.host.indexOf('fblocal') === -1) {\n        OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n      }\n    }\n    sendRequest(action, body, onResponse) {\n      const curReqNum = ++this.requestNumber_;\n      const msg = {\n        r: curReqNum,\n        a: action,\n        b: body\n      };\n      this.log_(stringify(msg));\n      assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n      this.realtime_.sendRequest(msg);\n      if (onResponse) {\n        this.requestCBHash_[curReqNum] = onResponse;\n      }\n    }\n    get(query) {\n      this.initConnection_();\n      const deferred = new Deferred();\n      const request = {\n        p: query._path.toString(),\n        q: query._queryObject\n      };\n      const outstandingGet = {\n        action: 'g',\n        request,\n        onComplete: message => {\n          const payload = message['d'];\n          if (message['s'] === 'ok') {\n            deferred.resolve(payload);\n          } else {\n            deferred.reject(payload);\n          }\n        }\n      };\n      this.outstandingGets_.push(outstandingGet);\n      this.outstandingGetCount_++;\n      const index = this.outstandingGets_.length - 1;\n      if (this.connected_) {\n        this.sendGet_(index);\n      }\n      return deferred.promise;\n    }\n    listen(query, currentHashFn, tag, onComplete) {\n      this.initConnection_();\n      const queryId = query._queryIdentifier;\n      const pathString = query._path.toString();\n      this.log_('Listen called for ' + pathString + ' ' + queryId);\n      if (!this.listens.has(pathString)) {\n        this.listens.set(pathString, new Map());\n      }\n      assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\n      assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\n      const listenSpec = {\n        onComplete,\n        hashFn: currentHashFn,\n        query,\n        tag\n      };\n      this.listens.get(pathString).set(queryId, listenSpec);\n      if (this.connected_) {\n        this.sendListen_(listenSpec);\n      }\n    }\n    sendGet_(index) {\n      const get = this.outstandingGets_[index];\n      this.sendRequest('g', get.request, message => {\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        if (get.onComplete) {\n          get.onComplete(message);\n        }\n      });\n    }\n    sendListen_(listenSpec) {\n      const query = listenSpec.query;\n      const pathString = query._path.toString();\n      const queryId = query._queryIdentifier;\n      this.log_('Listen on ' + pathString + ' for ' + queryId);\n      const req = {\n        /*path*/p: pathString\n      };\n      const action = 'q';\n      // Only bother to send query if it's non-default.\n      if (listenSpec.tag) {\n        req['q'] = query._queryObject;\n        req['t'] = listenSpec.tag;\n      }\n      req[/*hash*/'h'] = listenSpec.hashFn();\n      this.sendRequest(action, req, message => {\n        const payload = message[/*data*/'d'];\n        const status = message[/*status*/'s'];\n        // print warnings in any case...\n        PersistentConnection.warnOnListenWarnings_(payload, query);\n        const currentListenSpec = this.listens.get(pathString) && this.listens.get(pathString).get(queryId);\n        // only trigger actions if the listen hasn't been removed and readded\n        if (currentListenSpec === listenSpec) {\n          this.log_('listen response', message);\n          if (status !== 'ok') {\n            this.removeListen_(pathString, queryId);\n          }\n          if (listenSpec.onComplete) {\n            listenSpec.onComplete(status, payload);\n          }\n        }\n      });\n    }\n    static warnOnListenWarnings_(payload, query) {\n      if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const warnings = safeGet(payload, 'w');\n        if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n          const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n          const indexPath = query._path.toString();\n          warn(`Using an unspecified index. Your data will be downloaded and ` + `filtered on the client. Consider adding ${indexSpec} at ` + `${indexPath} to your security rules for better performance.`);\n        }\n      }\n    }\n    refreshAuthToken(token) {\n      this.authToken_ = token;\n      this.log_('Auth token refreshed');\n      if (this.authToken_) {\n        this.tryAuth();\n      } else {\n        //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n        //the credential so we dont become authenticated next time we connect.\n        if (this.connected_) {\n          this.sendRequest('unauth', {}, () => {});\n        }\n      }\n      this.reduceReconnectDelayIfAdminCredential_(token);\n    }\n    reduceReconnectDelayIfAdminCredential_(credential) {\n      // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n      // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n      const isFirebaseSecret = credential && credential.length === 40;\n      if (isFirebaseSecret || isAdmin(credential)) {\n        this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n      }\n    }\n    refreshAppCheckToken(token) {\n      this.appCheckToken_ = token;\n      this.log_('App check token refreshed');\n      if (this.appCheckToken_) {\n        this.tryAppCheck();\n      } else {\n        //If we're connected we want to let the server know to unauthenticate us.\n        //If we're not connected, simply delete the credential so we dont become\n        // authenticated next time we connect.\n        if (this.connected_) {\n          this.sendRequest('unappeck', {}, () => {});\n        }\n      }\n    }\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\n    tryAuth() {\n      if (this.connected_ && this.authToken_) {\n        const token = this.authToken_;\n        const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n        const requestData = {\n          cred: token\n        };\n        if (this.authOverride_ === null) {\n          requestData['noauth'] = true;\n        } else if (typeof this.authOverride_ === 'object') {\n          requestData['authvar'] = this.authOverride_;\n        }\n        this.sendRequest(authMethod, requestData, res => {\n          const status = res[/*status*/'s'];\n          const data = res[/*data*/'d'] || 'error';\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        });\n      }\n    }\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\n    tryAppCheck() {\n      if (this.connected_ && this.appCheckToken_) {\n        this.sendRequest('appcheck', {\n          'token': this.appCheckToken_\n        }, res => {\n          const status = res[/*status*/'s'];\n          const data = res[/*data*/'d'] || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        });\n      }\n    }\n    /**\r\n     * @inheritDoc\r\n     */\n    unlisten(query, tag) {\n      const pathString = query._path.toString();\n      const queryId = query._queryIdentifier;\n      this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n      assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\n      const listen = this.removeListen_(pathString, queryId);\n      if (listen && this.connected_) {\n        this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n      }\n    }\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\n      this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n      const req = {\n        /*path*/p: pathString\n      };\n      const action = 'n';\n      // Only bother sending queryId if it's non-default.\n      if (tag) {\n        req['q'] = queryObj;\n        req['t'] = tag;\n      }\n      this.sendRequest(action, req);\n    }\n    onDisconnectPut(pathString, data, onComplete) {\n      this.initConnection_();\n      if (this.connected_) {\n        this.sendOnDisconnect_('o', pathString, data, onComplete);\n      } else {\n        this.onDisconnectRequestQueue_.push({\n          pathString,\n          action: 'o',\n          data,\n          onComplete\n        });\n      }\n    }\n    onDisconnectMerge(pathString, data, onComplete) {\n      this.initConnection_();\n      if (this.connected_) {\n        this.sendOnDisconnect_('om', pathString, data, onComplete);\n      } else {\n        this.onDisconnectRequestQueue_.push({\n          pathString,\n          action: 'om',\n          data,\n          onComplete\n        });\n      }\n    }\n    onDisconnectCancel(pathString, onComplete) {\n      this.initConnection_();\n      if (this.connected_) {\n        this.sendOnDisconnect_('oc', pathString, null, onComplete);\n      } else {\n        this.onDisconnectRequestQueue_.push({\n          pathString,\n          action: 'oc',\n          data: null,\n          onComplete\n        });\n      }\n    }\n    sendOnDisconnect_(action, pathString, data, onComplete) {\n      const request = {\n        /*path*/p: pathString,\n        /*data*/d: data\n      };\n      this.log_('onDisconnect ' + action, request);\n      this.sendRequest(action, request, response => {\n        if (onComplete) {\n          setTimeout(() => {\n            onComplete(response[/*status*/'s'], response[/* data */'d']);\n          }, Math.floor(0));\n        }\n      });\n    }\n    put(pathString, data, onComplete, hash) {\n      this.putInternal('p', pathString, data, onComplete, hash);\n    }\n    merge(pathString, data, onComplete, hash) {\n      this.putInternal('m', pathString, data, onComplete, hash);\n    }\n    putInternal(action, pathString, data, onComplete, hash) {\n      this.initConnection_();\n      const request = {\n        /*path*/p: pathString,\n        /*data*/d: data\n      };\n      if (hash !== undefined) {\n        request[/*hash*/'h'] = hash;\n      }\n      // TODO: Only keep track of the most recent put for a given path?\n      this.outstandingPuts_.push({\n        action,\n        request,\n        onComplete\n      });\n      this.outstandingPutCount_++;\n      const index = this.outstandingPuts_.length - 1;\n      if (this.connected_) {\n        this.sendPut_(index);\n      } else {\n        this.log_('Buffering put: ' + pathString);\n      }\n    }\n    sendPut_(index) {\n      const action = this.outstandingPuts_[index].action;\n      const request = this.outstandingPuts_[index].request;\n      const onComplete = this.outstandingPuts_[index].onComplete;\n      this.outstandingPuts_[index].queued = this.connected_;\n      this.sendRequest(action, request, message => {\n        this.log_(action + ' response', message);\n        delete this.outstandingPuts_[index];\n        this.outstandingPutCount_--;\n        // Clean up array occasionally.\n        if (this.outstandingPutCount_ === 0) {\n          this.outstandingPuts_ = [];\n        }\n        if (onComplete) {\n          onComplete(message[/*status*/'s'], message[/* data */'d']);\n        }\n      });\n    }\n    reportStats(stats) {\n      // If we're not connected, we just drop the stats.\n      if (this.connected_) {\n        const request = {\n          /*counters*/c: stats\n        };\n        this.log_('reportStats', request);\n        this.sendRequest( /*stats*/'s', request, result => {\n          const status = result[/*status*/'s'];\n          if (status !== 'ok') {\n            const errorReason = result[/* data */'d'];\n            this.log_('reportStats', 'Error sending stats: ' + errorReason);\n          }\n        });\n      }\n    }\n    onDataMessage_(message) {\n      if ('r' in message) {\n        // this is a response\n        this.log_('from server: ' + stringify(message));\n        const reqNum = message['r'];\n        const onResponse = this.requestCBHash_[reqNum];\n        if (onResponse) {\n          delete this.requestCBHash_[reqNum];\n          onResponse(message[/*body*/'b']);\n        }\n      } else if ('error' in message) {\n        throw 'A server-side error has occurred: ' + message['error'];\n      } else if ('a' in message) {\n        // a and b are action and body, respectively\n        this.onDataPush_(message['a'], message['b']);\n      }\n    }\n    onDataPush_(action, body) {\n      this.log_('handleServerMessage', action, body);\n      if (action === 'd') {\n        this.onDataUpdate_(body[/*path*/'p'], body[/*data*/'d'], /*isMerge*/false, body['t']);\n      } else if (action === 'm') {\n        this.onDataUpdate_(body[/*path*/'p'], body[/*data*/'d'], /*isMerge=*/true, body['t']);\n      } else if (action === 'c') {\n        this.onListenRevoked_(body[/*path*/'p'], body[/*query*/'q']);\n      } else if (action === 'ac') {\n        this.onAuthRevoked_(body[/*status code*/'s'], body[/* explanation */'d']);\n      } else if (action === 'apc') {\n        this.onAppCheckRevoked_(body[/*status code*/'s'], body[/* explanation */'d']);\n      } else if (action === 'sd') {\n        this.onSecurityDebugPacket_(body);\n      } else {\n        error('Unrecognized action received from server: ' + stringify(action) + '\\nAre you using the latest client?');\n      }\n    }\n    onReady_(timestamp, sessionId) {\n      this.log_('connection ready');\n      this.connected_ = true;\n      this.lastConnectionEstablishedTime_ = new Date().getTime();\n      this.handleTimestamp_(timestamp);\n      this.lastSessionId = sessionId;\n      if (this.firstConnection_) {\n        this.sendConnectStats_();\n      }\n      this.restoreState_();\n      this.firstConnection_ = false;\n      this.onConnectStatus_(true);\n    }\n    scheduleConnect_(timeout) {\n      assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n      }\n      // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n      // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n      this.establishConnectionTimer_ = setTimeout(() => {\n        this.establishConnectionTimer_ = null;\n        this.establishConnection_();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(timeout));\n    }\n    initConnection_() {\n      if (!this.realtime_ && this.firstConnection_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    onVisible_(visible) {\n      // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n      if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n        this.log_('Window became visible.  Reducing delay.');\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        if (!this.realtime_) {\n          this.scheduleConnect_(0);\n        }\n      }\n      this.visible_ = visible;\n    }\n    onOnline_(online) {\n      if (online) {\n        this.log_('Browser went online.');\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        if (!this.realtime_) {\n          this.scheduleConnect_(0);\n        }\n      } else {\n        this.log_('Browser went offline.  Killing connection.');\n        if (this.realtime_) {\n          this.realtime_.close();\n        }\n      }\n    }\n    onRealtimeDisconnect_() {\n      this.log_('data client disconnected');\n      this.connected_ = false;\n      this.realtime_ = null;\n      // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n      this.cancelSentTransactions_();\n      // Clear out the pending requests.\n      this.requestCBHash_ = {};\n      if (this.shouldReconnect_()) {\n        if (!this.visible_) {\n          this.log_(\"Window isn't visible.  Delaying reconnect.\");\n          this.reconnectDelay_ = this.maxReconnectDelay_;\n          this.lastConnectionAttemptTime_ = new Date().getTime();\n        } else if (this.lastConnectionEstablishedTime_) {\n          // If we've been connected long enough, reset reconnect delay to minimum.\n          const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n          if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n          }\n          this.lastConnectionEstablishedTime_ = null;\n        }\n        const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n        let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n        reconnectDelay = Math.random() * reconnectDelay;\n        this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n        this.scheduleConnect_(reconnectDelay);\n        // Adjust reconnect delay for next time.\n        this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n      }\n      this.onConnectStatus_(false);\n    }\n    async establishConnection_() {\n      if (this.shouldReconnect_()) {\n        this.log_('Making a connection attempt');\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n        this.lastConnectionEstablishedTime_ = null;\n        const onDataMessage = this.onDataMessage_.bind(this);\n        const onReady = this.onReady_.bind(this);\n        const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n        const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n        const lastSessionId = this.lastSessionId;\n        let canceled = false;\n        let connection = null;\n        const closeFn = function () {\n          if (connection) {\n            connection.close();\n          } else {\n            canceled = true;\n            onDisconnect();\n          }\n        };\n        const sendRequestFn = function (msg) {\n          assert(connection, \"sendRequest call when we're not connected not allowed.\");\n          connection.sendRequest(msg);\n        };\n        this.realtime_ = {\n          close: closeFn,\n          sendRequest: sendRequestFn\n        };\n        const forceRefresh = this.forceTokenRefresh_;\n        this.forceTokenRefresh_ = false;\n        try {\n          // First fetch auth and app check token, and establish connection after\n          // fetching the token was successful\n          const [authToken, appCheckToken] = await Promise.all([this.authTokenProvider_.getToken(forceRefresh), this.appCheckTokenProvider_.getToken(forceRefresh)]);\n          if (!canceled) {\n            log('getToken() completed. Creating connection.');\n            this.authToken_ = authToken && authToken.accessToken;\n            this.appCheckToken_ = appCheckToken && appCheckToken.token;\n            connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, /* onKill= */reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            }, lastSessionId);\n          } else {\n            log('getToken() completed but was canceled');\n          }\n        } catch (error) {\n          this.log_('Failed to get token: ' + error);\n          if (!canceled) {\n            if (this.repoInfo_.nodeAdmin) {\n              // This may be a critical error for the Admin Node.js SDK, so log a warning.\n              // But getToken() may also just have temporarily failed, so we still want to\n              // continue retrying.\n              warn(error);\n            }\n            closeFn();\n          }\n        }\n      }\n    }\n    interrupt(reason) {\n      log('Interrupting connection for reason: ' + reason);\n      this.interruptReasons_[reason] = true;\n      if (this.realtime_) {\n        this.realtime_.close();\n      } else {\n        if (this.establishConnectionTimer_) {\n          clearTimeout(this.establishConnectionTimer_);\n          this.establishConnectionTimer_ = null;\n        }\n        if (this.connected_) {\n          this.onRealtimeDisconnect_();\n        }\n      }\n    }\n    resume(reason) {\n      log('Resuming connection for reason: ' + reason);\n      delete this.interruptReasons_[reason];\n      if (isEmpty(this.interruptReasons_)) {\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        if (!this.realtime_) {\n          this.scheduleConnect_(0);\n        }\n      }\n    }\n    handleTimestamp_(timestamp) {\n      const delta = timestamp - new Date().getTime();\n      this.onServerInfoUpdate_({\n        serverTimeOffset: delta\n      });\n    }\n    cancelSentTransactions_() {\n      for (let i = 0; i < this.outstandingPuts_.length; i++) {\n        const put = this.outstandingPuts_[i];\n        if (put && /*hash*/'h' in put.request && put.queued) {\n          if (put.onComplete) {\n            put.onComplete('disconnect');\n          }\n          delete this.outstandingPuts_[i];\n          this.outstandingPutCount_--;\n        }\n      }\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n    }\n    onListenRevoked_(pathString, query) {\n      // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n      let queryId;\n      if (!query) {\n        queryId = 'default';\n      } else {\n        queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n      }\n      const listen = this.removeListen_(pathString, queryId);\n      if (listen && listen.onComplete) {\n        listen.onComplete('permission_denied');\n      }\n    }\n    removeListen_(pathString, queryId) {\n      const normalizedPathString = new Path(pathString).toString(); // normalize path.\n      let listen;\n      if (this.listens.has(normalizedPathString)) {\n        const map = this.listens.get(normalizedPathString);\n        listen = map.get(queryId);\n        map.delete(queryId);\n        if (map.size === 0) {\n          this.listens.delete(normalizedPathString);\n        }\n      } else {\n        // all listens for this path has already been removed\n        listen = undefined;\n      }\n      return listen;\n    }\n    onAuthRevoked_(statusCode, explanation) {\n      log('Auth token revoked: ' + statusCode + '/' + explanation);\n      this.authToken_ = null;\n      this.forceTokenRefresh_ = true;\n      this.realtime_.close();\n      if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n        // We'll wait a couple times before logging the warning / increasing the\n        // retry period since oauth tokens will report as \"invalid\" if they're\n        // just expired. Plus there may be transient issues that resolve themselves.\n        this.invalidAuthTokenCount_++;\n        if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n          // Set a long reconnect delay because recovery is unlikely\n          this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n          // Notify the auth token provider that the token is invalid, which will log\n          // a warning\n          this.authTokenProvider_.notifyForInvalidToken();\n        }\n      }\n    }\n    onAppCheckRevoked_(statusCode, explanation) {\n      log('App check token revoked: ' + statusCode + '/' + explanation);\n      this.appCheckToken_ = null;\n      this.forceTokenRefresh_ = true;\n      // Note: We don't close the connection as the developer may not have\n      // enforcement enabled. The backend closes connections with enforcements.\n      if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n        // We'll wait a couple times before logging the warning / increasing the\n        // retry period since oauth tokens will report as \"invalid\" if they're\n        // just expired. Plus there may be transient issues that resolve themselves.\n        this.invalidAppCheckTokenCount_++;\n        if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n          this.appCheckTokenProvider_.notifyForInvalidToken();\n        }\n      }\n    }\n    onSecurityDebugPacket_(body) {\n      if (this.securityDebugCallback_) {\n        this.securityDebugCallback_(body);\n      } else {\n        if ('msg' in body) {\n          console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n        }\n      }\n    }\n    restoreState_() {\n      //Re-authenticate ourselves if we have a credential stored.\n      this.tryAuth();\n      this.tryAppCheck();\n      // Puts depend on having received the corresponding data update from the server before they complete, so we must\n      // make sure to send listens before puts.\n      for (const queries of this.listens.values()) {\n        for (const listenSpec of queries.values()) {\n          this.sendListen_(listenSpec);\n        }\n      }\n      for (let i = 0; i < this.outstandingPuts_.length; i++) {\n        if (this.outstandingPuts_[i]) {\n          this.sendPut_(i);\n        }\n      }\n      while (this.onDisconnectRequestQueue_.length) {\n        const request = this.onDisconnectRequestQueue_.shift();\n        this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n      }\n      for (let i = 0; i < this.outstandingGets_.length; i++) {\n        if (this.outstandingGets_[i]) {\n          this.sendGet_(i);\n        }\n      }\n    }\n    /**\r\n     * Sends client stats for first connection\r\n     */\n    sendConnectStats_() {\n      const stats = {};\n      let clientName = 'js';\n      if (isNodeSdk()) {\n        if (this.repoInfo_.nodeAdmin) {\n          clientName = 'admin_node';\n        } else {\n          clientName = 'node';\n        }\n      }\n      stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n      if (isMobileCordova()) {\n        stats['framework.cordova'] = 1;\n      } else if (isReactNative()) {\n        stats['framework.reactnative'] = 1;\n      }\n      this.reportStats(stats);\n    }\n    shouldReconnect_() {\n      const online = OnlineMonitor.getInstance().currentlyOnline();\n      return isEmpty(this.interruptReasons_) && online;\n    }\n  }\n  PersistentConnection.nextPersistentConnectionId_ = 0;\n  /**\r\n   * Counter for number of connections created. Mainly used for tagging in the logs\r\n   */\n  PersistentConnection.nextConnectionId_ = 0;\n\n  /**\r\n   * @license\r\n   * Copyright 2017 Google LLC\r\n   *\r\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   * you may not use this file except in compliance with the License.\r\n   * You may obtain a copy of the License at\r\n   *\r\n   *   http://www.apache.org/licenses/LICENSE-2.0\r\n   *\r\n   * Unless required by applicable law or agreed to in writing, software\r\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   * See the License for the specific language governing permissions and\r\n   * limitations under the License.\r\n   */\n  return PersistentConnection;\n})();\nclass NamedNode {\n  constructor(name, node) {\n    this.name = name;\n    this.node = node;\n  }\n  static Wrap(name, node) {\n    return new NamedNode(name, node);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Index {\n  /**\r\n   * @returns A standalone comparison function for\r\n   * this index\r\n   */\n  getCompare() {\n    return this.compare.bind(this);\n  }\n  /**\r\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n   *\r\n   *\r\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n   */\n  indexedValueChanged(oldNode, newNode) {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n  /**\r\n   * @returns a node wrapper that will sort equal to or less than\r\n   * any other node wrapper, using this index\r\n   */\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet __EMPTY_NODE;\nclass KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a, b) {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n  makePost(indexValue, name) {\n    assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  toString() {\n    return '.key';\n  }\n}\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An iterator over an LLRBNode.\r\n */\nclass SortedMapIterator {\n  /**\r\n   * @param node - Node to iterate.\r\n   * @param isReverse_ - Whether or not to iterate in reverse\r\n   */\n  constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    this.nodeStack_ = [];\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n  getNext() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n    let node = this.nodeStack_.pop();\n    let result;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = {\n        key: node.key,\n        value: node.value\n      };\n    }\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n    return result;\n  }\n  hasNext() {\n    return this.nodeStack_.length > 0;\n  }\n  peek() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  }\n}\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\nlet LLRBNode = /*#__PURE__*/(() => {\n  class LLRBNode {\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\n    constructor(key, value, color, left, right) {\n      this.key = key;\n      this.value = value;\n      this.color = color != null ? color : LLRBNode.RED;\n      this.left = left != null ? left : SortedMap.EMPTY_NODE;\n      this.right = right != null ? right : SortedMap.EMPTY_NODE;\n    }\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\n    copy(key, value, color, left, right) {\n      return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    }\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\n    count() {\n      return this.left.count() + 1 + this.right.count();\n    }\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\n    isEmpty() {\n      return false;\n    }\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\n    inorderTraversal(action) {\n      return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);\n    }\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\n    reverseTraversal(action) {\n      return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n    }\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\n    min_() {\n      if (this.left.isEmpty()) {\n        return this;\n      } else {\n        return this.left.min_();\n      }\n    }\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\n    minKey() {\n      return this.min_().key;\n    }\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\n    maxKey() {\n      if (this.right.isEmpty()) {\n        return this.key;\n      } else {\n        return this.right.maxKey();\n      }\n    }\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\n    insert(key, value, comparator) {\n      let n = this;\n      const cmp = comparator(key, n.key);\n      if (cmp < 0) {\n        n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n      } else if (cmp === 0) {\n        n = n.copy(null, value, null, null, null);\n      } else {\n        n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n      }\n      return n.fixUp_();\n    }\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\n    removeMin_() {\n      if (this.left.isEmpty()) {\n        return SortedMap.EMPTY_NODE;\n      }\n      let n = this;\n      if (!n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.removeMin_(), null);\n      return n.fixUp_();\n    }\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\n    remove(key, comparator) {\n      let n, smallest;\n      n = this;\n      if (comparator(key, n.key) < 0) {\n        if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n          n = n.moveRedLeft_();\n        }\n        n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n      } else {\n        if (n.left.isRed_()) {\n          n = n.rotateRight_();\n        }\n        if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n          n = n.moveRedRight_();\n        }\n        if (comparator(key, n.key) === 0) {\n          if (n.right.isEmpty()) {\n            return SortedMap.EMPTY_NODE;\n          } else {\n            smallest = n.right.min_();\n            n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n          }\n        }\n        n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n      }\n      return n.fixUp_();\n    }\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\n    isRed_() {\n      return this.color;\n    }\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\n    fixUp_() {\n      let n = this;\n      if (n.right.isRed_() && !n.left.isRed_()) {\n        n = n.rotateLeft_();\n      }\n      if (n.left.isRed_() && n.left.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (n.left.isRed_() && n.right.isRed_()) {\n        n = n.colorFlip_();\n      }\n      return n;\n    }\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\n    moveRedLeft_() {\n      let n = this.colorFlip_();\n      if (n.right.left.isRed_()) {\n        n = n.copy(null, null, null, null, n.right.rotateRight_());\n        n = n.rotateLeft_();\n        n = n.colorFlip_();\n      }\n      return n;\n    }\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\n    moveRedRight_() {\n      let n = this.colorFlip_();\n      if (n.left.left.isRed_()) {\n        n = n.rotateRight_();\n        n = n.colorFlip_();\n      }\n      return n;\n    }\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\n    rotateLeft_() {\n      const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n      return this.right.copy(null, null, this.color, nl, null);\n    }\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\n    rotateRight_() {\n      const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n      return this.left.copy(null, null, this.color, null, nr);\n    }\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\n    colorFlip_() {\n      const left = this.left.copy(null, null, !this.left.color, null, null);\n      const right = this.right.copy(null, null, !this.right.color, null, null);\n      return this.copy(null, null, !this.color, left, right);\n    }\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\n    checkMaxDepth_() {\n      const blackDepth = this.check_();\n      return Math.pow(2.0, blackDepth) <= this.count() + 1;\n    }\n    check_() {\n      if (this.isRed_() && this.left.isRed_()) {\n        throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n      }\n      if (this.right.isRed_()) {\n        throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n      }\n      const blackDepth = this.left.check_();\n      if (blackDepth !== this.right.check_()) {\n        throw new Error('Black depths differ');\n      } else {\n        return blackDepth + (this.isRed_() ? 0 : 1);\n      }\n    }\n  }\n  LLRBNode.RED = true;\n  LLRBNode.BLACK = false;\n  /**\r\n   * Represents an empty node (a leaf node in the Red-Black Tree).\r\n   */\n  return LLRBNode;\n})();\nclass LLRBEmptyNode {\n  /**\r\n   * Returns a copy of the current node.\r\n   *\r\n   * @returns The node copy.\r\n   */\n  copy(key, value, color, left, right) {\n    return this;\n  }\n  /**\r\n   * Returns a copy of the tree, with the specified key/value added.\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item added.\r\n   */\n  insert(key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  }\n  /**\r\n   * Returns a copy of the tree, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @param comparator - Comparator.\r\n   * @returns New tree, with item removed.\r\n   */\n  remove(key, comparator) {\n    return this;\n  }\n  /**\r\n   * @returns The total number of nodes in the tree.\r\n   */\n  count() {\n    return 0;\n  }\n  /**\r\n   * @returns True if the tree is empty.\r\n   */\n  isEmpty() {\n    return true;\n  }\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n  inorderTraversal(action) {\n    return false;\n  }\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param action - Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @returns True if traversal was aborted.\r\n   */\n  reverseTraversal(action) {\n    return false;\n  }\n  minKey() {\n    return null;\n  }\n  maxKey() {\n    return null;\n  }\n  check_() {\n    return 0;\n  }\n  /**\r\n   * @returns Whether this node is red.\r\n   */\n  isRed_() {\n    return false;\n  }\n}\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\nclass SortedMap {\n  /**\r\n   * @param comparator_ - Key comparator.\r\n   * @param root_ - Optional root node for the map.\r\n   */\n  constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key/value added or replaced.\r\n   * (TODO: We should perhaps rename this method to 'put')\r\n   *\r\n   * @param key - Key to be added.\r\n   * @param value - Value to be added.\r\n   * @returns New map, with item added.\r\n   */\n  insert(key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key removed.\r\n   *\r\n   * @param key - The key to remove.\r\n   * @returns New map, with item removed.\r\n   */\n  remove(key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\r\n   * Returns the value of the node with the given key, or null.\r\n   *\r\n   * @param key - The key to look up.\r\n   * @returns The value of the node with the given key, or null if the\r\n   * key doesn't exist.\r\n   */\n  get(key) {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n  /**\r\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n   * @param key - The key to find the predecessor of\r\n   * @returns The predecessor key.\r\n   */\n  getPredecessorKey(key) {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  }\n  /**\r\n   * @returns True if the map is empty.\r\n   */\n  isEmpty() {\n    return this.root_.isEmpty();\n  }\n  /**\r\n   * @returns The total number of nodes in the map.\r\n   */\n  count() {\n    return this.root_.count();\n  }\n  /**\r\n   * @returns The minimum key in the map.\r\n   */\n  minKey() {\n    return this.root_.minKey();\n  }\n  /**\r\n   * @returns The maximum key in the map.\r\n   */\n  maxKey() {\n    return this.root_.maxKey();\n  }\n  /**\r\n   * Traverses the map in key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n  inorderTraversal(action) {\n    return this.root_.inorderTraversal(action);\n  }\n  /**\r\n   * Traverses the map in reverse key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @returns True if the traversal was aborted.\r\n   */\n  reverseTraversal(action) {\n    return this.root_.reverseTraversal(action);\n  }\n  /**\r\n   * Returns an iterator over the SortedMap.\r\n   * @returns The iterator.\r\n   */\n  getIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  }\n  getIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  }\n  getReverseIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  }\n  getReverseIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  }\n}\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet MAX_NODE$2;\nfunction setMaxNode$1(val) {\n  MAX_NODE$2 = val;\n}\nconst priorityHashText = function (priority) {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\nconst validatePriorityNode = function (priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet __childrenNodeConstructor;\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\nlet LeafNode = /*#__PURE__*/(() => {\n  class LeafNode {\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      this.value_ = value_;\n      this.priorityNode_ = priorityNode_;\n      this.lazyHash_ = null;\n      assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n      validatePriorityNode(this.priorityNode_);\n    }\n    static set __childrenNodeConstructor(val) {\n      __childrenNodeConstructor = val;\n    }\n    static get __childrenNodeConstructor() {\n      return __childrenNodeConstructor;\n    }\n    /** @inheritDoc */\n    isLeafNode() {\n      return true;\n    }\n    /** @inheritDoc */\n    getPriority() {\n      return this.priorityNode_;\n    }\n    /** @inheritDoc */\n    updatePriority(newPriorityNode) {\n      return new LeafNode(this.value_, newPriorityNode);\n    }\n    /** @inheritDoc */\n    getImmediateChild(childName) {\n      // Hack to treat priority as a regular child\n      if (childName === '.priority') {\n        return this.priorityNode_;\n      } else {\n        return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n      }\n    }\n    /** @inheritDoc */\n    getChild(path) {\n      if (pathIsEmpty(path)) {\n        return this;\n      } else if (pathGetFront(path) === '.priority') {\n        return this.priorityNode_;\n      } else {\n        return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n      }\n    }\n    hasChild() {\n      return false;\n    }\n    /** @inheritDoc */\n    getPredecessorChildName(childName, childNode) {\n      return null;\n    }\n    /** @inheritDoc */\n    updateImmediateChild(childName, newChildNode) {\n      if (childName === '.priority') {\n        return this.updatePriority(newChildNode);\n      } else if (newChildNode.isEmpty() && childName !== '.priority') {\n        return this;\n      } else {\n        return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n      }\n    }\n    /** @inheritDoc */\n    updateChild(path, newChildNode) {\n      const front = pathGetFront(path);\n      if (front === null) {\n        return newChildNode;\n      } else if (newChildNode.isEmpty() && front !== '.priority') {\n        return this;\n      } else {\n        assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n        return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\n      }\n    }\n    /** @inheritDoc */\n    isEmpty() {\n      return false;\n    }\n    /** @inheritDoc */\n    numChildren() {\n      return 0;\n    }\n    /** @inheritDoc */\n    forEachChild(index, action) {\n      return false;\n    }\n    val(exportFormat) {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        return {\n          '.value': this.getValue(),\n          '.priority': this.getPriority().val()\n        };\n      } else {\n        return this.getValue();\n      }\n    }\n    /** @inheritDoc */\n    hash() {\n      if (this.lazyHash_ === null) {\n        let toHash = '';\n        if (!this.priorityNode_.isEmpty()) {\n          toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n        }\n        const type = typeof this.value_;\n        toHash += type + ':';\n        if (type === 'number') {\n          toHash += doubleToIEEE754String(this.value_);\n        } else {\n          toHash += this.value_;\n        }\n        this.lazyHash_ = sha1(toHash);\n      }\n      return this.lazyHash_;\n    }\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\n    getValue() {\n      return this.value_;\n    }\n    compareTo(other) {\n      if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n        return 1;\n      } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n        return -1;\n      } else {\n        assert(other.isLeafNode(), 'Unknown node type');\n        return this.compareToLeafNode_(other);\n      }\n    }\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\n    compareToLeafNode_(otherLeaf) {\n      const otherLeafType = typeof otherLeaf.value_;\n      const thisLeafType = typeof this.value_;\n      const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n      const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n      assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n      assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n      if (otherIndex === thisIndex) {\n        // Same type, compare values\n        if (thisLeafType === 'object') {\n          // Deferred value nodes are all equal, but we should also never get to this point...\n          return 0;\n        } else {\n          // Note that this works because true > false, all others are number or string comparisons\n          if (this.value_ < otherLeaf.value_) {\n            return -1;\n          } else if (this.value_ === otherLeaf.value_) {\n            return 0;\n          } else {\n            return 1;\n          }\n        }\n      } else {\n        return thisIndex - otherIndex;\n      }\n    }\n    withIndex() {\n      return this;\n    }\n    isIndexed() {\n      return true;\n    }\n    equals(other) {\n      if (other === this) {\n        return true;\n      } else if (other.isLeafNode()) {\n        const otherLeaf = other;\n        return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n      } else {\n        return false;\n      }\n    }\n  }\n  /**\r\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n   * the same type, the comparison falls back to their value\r\n   */\n  LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  /**\r\n   * @license\r\n   * Copyright 2017 Google LLC\r\n   *\r\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   * you may not use this file except in compliance with the License.\r\n   * You may obtain a copy of the License at\r\n   *\r\n   *   http://www.apache.org/licenses/LICENSE-2.0\r\n   *\r\n   * Unless required by applicable law or agreed to in writing, software\r\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   * See the License for the specific language governing permissions and\r\n   * limitations under the License.\r\n   */\n  return LeafNode;\n})();\nlet nodeFromJSON$1;\nlet MAX_NODE$1;\nfunction setNodeFromJSON(val) {\n  nodeFromJSON$1 = val;\n}\nfunction setMaxNode(val) {\n  MAX_NODE$1 = val;\n}\nclass PriorityIndex extends Index {\n  compare(a, b) {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node) {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n  }\n  makePost(indexValue, name) {\n    const priorityNode = nodeFromJSON$1(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  toString() {\n    return '.priority';\n  }\n}\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_2 = Math.log(2);\nclass Base12Num {\n  constructor(length) {\n    const logBase2 = num =>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parseInt(Math.log(num) / LOG_2, 10);\n    const bitMask = bits => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n  nextBitIsOne() {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & 0x1 << this.current_);\n    this.current_--;\n    return result;\n  }\n}\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n  const buildBalancedTree = function (low, high) {\n    const length = high - low;\n    let namedNode;\n    let key;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt(length / 2, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n  const buildFrom12Array = function (base12) {\n    let node = null;\n    let root = null;\n    let index = childList.length;\n    const buildPennant = function (chunkSize, color) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n    const attachPennant = function (pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap(mapSortFn || cmp, root);\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet _defaultIndexMap;\nconst fallbackObject = {};\nclass IndexMap {\n  constructor(indexes_, indexSet_) {\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n  /**\r\n   * The default IndexMap for nodes without a priority\r\n   */\n  static get Default() {\n    assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n    _defaultIndexMap = _defaultIndexMap || new IndexMap({\n      '.priority': fallbackObject\n    }, {\n      '.priority': PRIORITY_INDEX\n    });\n    return _defaultIndexMap;\n  }\n  get(indexKey) {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n  hasIndex(indexDefinition) {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n  addIndex(indexDefinition, existingChildren) {\n    assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = Object.assign({}, this.indexSet_);\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = Object.assign({}, this.indexes_);\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n  /**\r\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n   */\n  addToIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\n      const index = safeGet(this.indexSet_, indexName);\n      assert(index, 'Missing index implementation for ' + indexName);\n      if (indexedChildren === fallbackObject) {\n        // Check to see if we need to index everything\n        if (index.isDefinedOn(namedNode.node)) {\n          // We need to build this index\n          const childList = [];\n          const iter = existingChildren.getIterator(NamedNode.Wrap);\n          let next = iter.getNext();\n          while (next) {\n            if (next.name !== namedNode.name) {\n              childList.push(next);\n            }\n            next = iter.getNext();\n          }\n          childList.push(namedNode);\n          return buildChildSet(childList, index.getCompare());\n        } else {\n          // No change, this remains a fallback\n          return fallbackObject;\n        }\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        let newChildren = indexedChildren;\n        if (existingSnap) {\n          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        }\n        return newChildren.insert(namedNode, namedNode.node);\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n  /**\r\n   * Create a new IndexMap instance with the given value removed\r\n   */\n  removeFromIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, indexedChildren => {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        if (existingSnap) {\n          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\nlet EMPTY_NODE;\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\nlet ChildrenNode = /*#__PURE__*/(() => {\n  class ChildrenNode {\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\n    constructor(children_, priorityNode_, indexMap_) {\n      this.children_ = children_;\n      this.priorityNode_ = priorityNode_;\n      this.indexMap_ = indexMap_;\n      this.lazyHash_ = null;\n      /**\r\n       * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n       * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n       * class instead of an empty ChildrenNode.\r\n       */\n      if (this.priorityNode_) {\n        validatePriorityNode(this.priorityNode_);\n      }\n      if (this.children_.isEmpty()) {\n        assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n      }\n    }\n    static get EMPTY_NODE() {\n      return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n    }\n    /** @inheritDoc */\n    isLeafNode() {\n      return false;\n    }\n    /** @inheritDoc */\n    getPriority() {\n      return this.priorityNode_ || EMPTY_NODE;\n    }\n    /** @inheritDoc */\n    updatePriority(newPriorityNode) {\n      if (this.children_.isEmpty()) {\n        // Don't allow priorities on empty nodes\n        return this;\n      } else {\n        return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n      }\n    }\n    /** @inheritDoc */\n    getImmediateChild(childName) {\n      // Hack to treat priority as a regular child\n      if (childName === '.priority') {\n        return this.getPriority();\n      } else {\n        const child = this.children_.get(childName);\n        return child === null ? EMPTY_NODE : child;\n      }\n    }\n    /** @inheritDoc */\n    getChild(path) {\n      const front = pathGetFront(path);\n      if (front === null) {\n        return this;\n      }\n      return this.getImmediateChild(front).getChild(pathPopFront(path));\n    }\n    /** @inheritDoc */\n    hasChild(childName) {\n      return this.children_.get(childName) !== null;\n    }\n    /** @inheritDoc */\n    updateImmediateChild(childName, newChildNode) {\n      assert(newChildNode, 'We should always be passing snapshot nodes');\n      if (childName === '.priority') {\n        return this.updatePriority(newChildNode);\n      } else {\n        const namedNode = new NamedNode(childName, newChildNode);\n        let newChildren, newIndexMap;\n        if (newChildNode.isEmpty()) {\n          newChildren = this.children_.remove(childName);\n          newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n        } else {\n          newChildren = this.children_.insert(childName, newChildNode);\n          newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n        }\n        const newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n        return new ChildrenNode(newChildren, newPriority, newIndexMap);\n      }\n    }\n    /** @inheritDoc */\n    updateChild(path, newChildNode) {\n      const front = pathGetFront(path);\n      if (front === null) {\n        return newChildNode;\n      } else {\n        assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n        const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\n        return this.updateImmediateChild(front, newImmediateChild);\n      }\n    }\n    /** @inheritDoc */\n    isEmpty() {\n      return this.children_.isEmpty();\n    }\n    /** @inheritDoc */\n    numChildren() {\n      return this.children_.count();\n    }\n    /** @inheritDoc */\n    val(exportFormat) {\n      if (this.isEmpty()) {\n        return null;\n      }\n      const obj = {};\n      let numKeys = 0,\n        maxKey = 0,\n        allIntegerKeys = true;\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        obj[key] = childNode.val(exportFormat);\n        numKeys++;\n        if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n          maxKey = Math.max(maxKey, Number(key));\n        } else {\n          allIntegerKeys = false;\n        }\n      });\n      if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n        // convert to array.\n        const array = [];\n        // eslint-disable-next-line guard-for-in\n        for (const key in obj) {\n          array[key] = obj[key];\n        }\n        return array;\n      } else {\n        if (exportFormat && !this.getPriority().isEmpty()) {\n          obj['.priority'] = this.getPriority().val();\n        }\n        return obj;\n      }\n    }\n    /** @inheritDoc */\n    hash() {\n      if (this.lazyHash_ === null) {\n        let toHash = '';\n        if (!this.getPriority().isEmpty()) {\n          toHash += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n        }\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          const childHash = childNode.hash();\n          if (childHash !== '') {\n            toHash += ':' + key + ':' + childHash;\n          }\n        });\n        this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n      }\n      return this.lazyHash_;\n    }\n    /** @inheritDoc */\n    getPredecessorChildName(childName, childNode, index) {\n      const idx = this.resolveIndex_(index);\n      if (idx) {\n        const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n        return predecessor ? predecessor.name : null;\n      } else {\n        return this.children_.getPredecessorKey(childName);\n      }\n    }\n    getFirstChildName(indexDefinition) {\n      const idx = this.resolveIndex_(indexDefinition);\n      if (idx) {\n        const minKey = idx.minKey();\n        return minKey && minKey.name;\n      } else {\n        return this.children_.minKey();\n      }\n    }\n    getFirstChild(indexDefinition) {\n      const minKey = this.getFirstChildName(indexDefinition);\n      if (minKey) {\n        return new NamedNode(minKey, this.children_.get(minKey));\n      } else {\n        return null;\n      }\n    }\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\n    getLastChildName(indexDefinition) {\n      const idx = this.resolveIndex_(indexDefinition);\n      if (idx) {\n        const maxKey = idx.maxKey();\n        return maxKey && maxKey.name;\n      } else {\n        return this.children_.maxKey();\n      }\n    }\n    getLastChild(indexDefinition) {\n      const maxKey = this.getLastChildName(indexDefinition);\n      if (maxKey) {\n        return new NamedNode(maxKey, this.children_.get(maxKey));\n      } else {\n        return null;\n      }\n    }\n    forEachChild(index, action) {\n      const idx = this.resolveIndex_(index);\n      if (idx) {\n        return idx.inorderTraversal(wrappedNode => {\n          return action(wrappedNode.name, wrappedNode.node);\n        });\n      } else {\n        return this.children_.inorderTraversal(action);\n      }\n    }\n    getIterator(indexDefinition) {\n      return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n    }\n    getIteratorFrom(startPost, indexDefinition) {\n      const idx = this.resolveIndex_(indexDefinition);\n      if (idx) {\n        return idx.getIteratorFrom(startPost, key => key);\n      } else {\n        const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n        let next = iterator.peek();\n        while (next != null && indexDefinition.compare(next, startPost) < 0) {\n          iterator.getNext();\n          next = iterator.peek();\n        }\n        return iterator;\n      }\n    }\n    getReverseIterator(indexDefinition) {\n      return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n    }\n    getReverseIteratorFrom(endPost, indexDefinition) {\n      const idx = this.resolveIndex_(indexDefinition);\n      if (idx) {\n        return idx.getReverseIteratorFrom(endPost, key => {\n          return key;\n        });\n      } else {\n        const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n        let next = iterator.peek();\n        while (next != null && indexDefinition.compare(next, endPost) > 0) {\n          iterator.getNext();\n          next = iterator.peek();\n        }\n        return iterator;\n      }\n    }\n    compareTo(other) {\n      if (this.isEmpty()) {\n        if (other.isEmpty()) {\n          return 0;\n        } else {\n          return -1;\n        }\n      } else if (other.isLeafNode() || other.isEmpty()) {\n        return 1;\n      } else if (other === MAX_NODE) {\n        return -1;\n      } else {\n        // Must be another node with children.\n        return 0;\n      }\n    }\n    withIndex(indexDefinition) {\n      if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n        return this;\n      } else {\n        const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n        return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n      }\n    }\n    isIndexed(index) {\n      return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n    }\n    equals(other) {\n      if (other === this) {\n        return true;\n      } else if (other.isLeafNode()) {\n        return false;\n      } else {\n        const otherChildrenNode = other;\n        if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n          return false;\n        } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n          const thisIter = this.getIterator(PRIORITY_INDEX);\n          const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n          let thisCurrent = thisIter.getNext();\n          let otherCurrent = otherIter.getNext();\n          while (thisCurrent && otherCurrent) {\n            if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n              return false;\n            }\n            thisCurrent = thisIter.getNext();\n            otherCurrent = otherIter.getNext();\n          }\n          return thisCurrent === null && otherCurrent === null;\n        } else {\n          return false;\n        }\n      }\n    }\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\n    resolveIndex_(indexDefinition) {\n      if (indexDefinition === KEY_INDEX) {\n        return null;\n      } else {\n        return this.indexMap_.get(indexDefinition.toString());\n      }\n    }\n  }\n  ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n  return ChildrenNode;\n})();\nclass MaxNode extends ChildrenNode {\n  constructor() {\n    super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\n  }\n  compareTo(other) {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n  equals(other) {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n  getPriority() {\n    return this;\n  }\n  getImmediateChild(childName) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n  isEmpty() {\n    return false;\n  }\n}\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\nconst MAX_NODE = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n/**\r\n * Reference Extensions\r\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode$1(MAX_NODE);\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst USE_HINZE = true;\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\nfunction nodeFromJSON(json, priority = null) {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n  assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority = childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n    const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\n    }\n  } else {\n    let node = ChildrenNode.EMPTY_NODE;\n    each(json, (key, childData) => {\n      if (contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass PathIndex extends Index {\n  constructor(indexPath_) {\n    super();\n    this.indexPath_ = indexPath_;\n    assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n  }\n  extractChild(snap) {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a, b) {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new NamedNode(name, node);\n  }\n  maxPost() {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString() {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ValueIndex extends Index {\n  compare(a, b) {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node) {\n    return true;\n  }\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n  maxPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MAX;\n  }\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n  /**\r\n   * @returns String representation for inclusion in a query spec\r\n   */\n  toString() {\n    return '.value';\n  }\n}\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction changeValue(snapshotNode) {\n  return {\n    type: \"value\" /* ChangeType.VALUE */,\n    snapshotNode\n  };\n}\nfunction changeChildAdded(childName, snapshotNode) {\n  return {\n    type: \"child_added\" /* ChangeType.CHILD_ADDED */,\n    snapshotNode,\n    childName\n  };\n}\nfunction changeChildRemoved(childName, snapshotNode) {\n  return {\n    type: \"child_removed\" /* ChangeType.CHILD_REMOVED */,\n    snapshotNode,\n    childName\n  };\n}\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\n  return {\n    type: \"child_changed\" /* ChangeType.CHILD_CHANGED */,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\nfunction changeChildMoved(childName, snapshotNode) {\n  return {\n    type: \"child_moved\" /* ChangeType.CHILD_MOVED */,\n    snapshotNode,\n    childName\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\nclass IndexedFilter {\n  constructor(index_) {\n    this.index_ = index_;\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\n        } else {\n          assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap, newPriority) {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes() {\n    return false;\n  }\n  getIndexedFilter() {\n    return this;\n  }\n  getIndex() {\n    return this.index_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\nclass RangedFilter {\n  constructor(params) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  getStartPost() {\n    return this.startPost_;\n  }\n  getEndPost() {\n    return this.endPost_;\n  }\n  matches(node) {\n    const isWithinStart = this.startIsInclusive_ ? this.index_.compare(this.getStartPost(), node) <= 0 : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_ ? this.index_.compare(node, this.getEndPost()) <= 0 : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes() {\n    return true;\n  }\n  getIndexedFilter() {\n    return this.indexedFilter_;\n  }\n  getIndex() {\n    return this.index_;\n  }\n  static getStartPost_(params) {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n  static getEndPost_(params) {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\nclass LimitedFilter {\n  constructor(params) {\n    this.withinDirectionalStart = node => this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n    this.withinDirectionalEnd = node => this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n    this.withinStartPost = node => {\n      const compareRes = this.index_.compare(this.rangedFilter_.getStartPost(), node);\n      return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n    };\n    this.withinEndPost = node => {\n      const compareRes = this.index_.compare(node, this.rangedFilter_.getEndPost());\n      return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n    };\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  }\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n        let count = 0;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange = count < this.limit_ && this.withinDirectionalStart(next) && this.withinDirectionalEnd(next);\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes() {\n    return true;\n  }\n  getIndexedFilter() {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex() {\n    return this.index_;\n  }\n  fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a, b) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n      const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n        const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\n          }\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\nclass QueryParams {\n  constructor() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.startAfterSet_ = false; // can only be true if startSet_ is true\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.endBeforeSet_ = false; // can only be true if endSet_ is true\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n  hasStart() {\n    return this.startSet_;\n  }\n  /**\r\n   * @returns True if it would return from left.\r\n   */\n  isViewFromLeft() {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n    }\n  }\n  /**\r\n   * Only valid to call if hasStart() returns true\r\n   */\n  getIndexStartValue() {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n  /**\r\n   * Only valid to call if hasStart() returns true.\r\n   * Returns the starting key name for the range defined by these query parameters\r\n   */\n  getIndexStartName() {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n  hasEnd() {\n    return this.endSet_;\n  }\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   */\n  getIndexEndValue() {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * Returns the end key name for the range defined by these query parameters\r\n   */\n  getIndexEndName() {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n  hasLimit() {\n    return this.limitSet_;\n  }\n  /**\r\n   * @returns True if a limit has been set and it has been explicitly anchored\r\n   */\n  hasAnchoredLimit() {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n  /**\r\n   * Only valid to call if hasLimit() returns true\r\n   */\n  getLimit() {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n  getIndex() {\n    return this.index_;\n  }\n  loadsAllData() {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n  isDefault() {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n  copy() {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\nfunction queryParamsGetNodeFilter(queryParams) {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n  return newParams;\n}\nfunction queryParamsLimitToLast(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\n  return newParams;\n}\nfunction queryParamsStartAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\n  let params;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\nfunction queryParamsEndAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\n  let params;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\nfunction queryParamsOrderBy(queryParams, index) {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\nfunction queryParamsToRestQueryStringParameters(queryParams) {\n  const qs = {};\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = \"$priority\" /* REST_QUERY_CONSTANTS.PRIORITY_INDEX */;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = \"$value\" /* REST_QUERY_CONSTANTS.VALUE_INDEX */;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = \"$key\" /* REST_QUERY_CONSTANTS.KEY_INDEX */;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[\"orderBy\" /* REST_QUERY_CONSTANTS.ORDER_BY */] = stringify(orderBy);\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_ ? \"startAfter\" /* REST_QUERY_CONSTANTS.START_AFTER */ : \"startAt\" /* REST_QUERY_CONSTANTS.START_AT */;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_ ? \"endBefore\" /* REST_QUERY_CONSTANTS.END_BEFORE */ : \"endAt\" /* REST_QUERY_CONSTANTS.END_AT */;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[\"limitToFirst\" /* REST_QUERY_CONSTANTS.LIMIT_TO_FIRST */] = queryParams.limit_;\n    } else {\n      qs[\"limitToLast\" /* REST_QUERY_CONSTANTS.LIMIT_TO_LAST */] = queryParams.limit_;\n    }\n  }\n  return qs;\n}\nfunction queryParamsGetQueryObject(queryParams) {\n  const obj = {};\n  if (queryParams.startSet_) {\n    obj[\"sp\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE */] = queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[\"sn\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME */] = queryParams.indexStartName_;\n    }\n    obj[\"sin\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE */] = !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[\"ep\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE */] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[\"en\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME */] = queryParams.indexEndName_;\n    }\n    obj[\"ein\" /* WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE */] = !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[\"l\" /* WIRE_PROTOCOL_CONSTANTS.LIMIT */] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = \"l\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT */;\n      } else {\n        viewFrom = \"r\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT */;\n      }\n    }\n    obj[\"vf\" /* WIRE_PROTOCOL_CONSTANTS.VIEW_FROM */] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[\"i\" /* WIRE_PROTOCOL_CONSTANTS.INDEX */] = queryParams.index_.toString();\n  }\n  return obj;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\nclass ReadonlyRestClient extends ServerActions {\n  /**\r\n   * @param repoInfo_ - Data about the namespace we are connecting to\r\n   * @param onDataUpdate_ - A callback for new data from the server\r\n   */\n  constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\n    super();\n    this.repoInfo_ = repoInfo_;\n    this.onDataUpdate_ = onDataUpdate_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    /** @private {function(...[*])} */\n    this.log_ = logWrapper('p:rest:');\n    /**\r\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n     * that's been removed. :-/\r\n     */\n    this.listens_ = {};\n  }\n  reportStats(stats) {\n    throw new Error('Method not implemented.');\n  }\n  static getListenId_(query, tag) {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\n      return query._path.toString();\n    }\n  }\n  /** @inheritDoc */\n  listen(query, currentHashFn, tag, onComplete) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n      if (error === null) {\n        this.onDataUpdate_(pathString, data, /*isMerge=*/false, tag);\n      }\n      if (safeGet(this.listens_, listenId) === thisListen) {\n        let status;\n        if (!error) {\n          status = 'ok';\n        } else if (error === 401) {\n          status = 'permission_denied';\n        } else {\n          status = 'rest_error:' + error;\n        }\n        onComplete(status, null);\n      }\n    });\n  }\n  /** @inheritDoc */\n  unlisten(query, tag) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n  get(query) {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    const pathString = query._path.toString();\n    const deferred = new Deferred();\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n      if (error === null) {\n        this.onDataUpdate_(pathString, data, /*isMerge=*/false, /*tag=*/null);\n        deferred.resolve(data);\n      } else {\n        deferred.reject(new Error(data));\n      }\n    });\n    return deferred.promise;\n  }\n  /** @inheritDoc */\n  refreshAuthToken(token) {\n    // no-op since we just always call getToken.\n  }\n  /**\r\n   * Performs a REST request to the given path, with the provided query string parameters,\r\n   * and any auth credentials we have.\r\n   */\n  restRequest_(pathString, queryStringParameters = {}, callback) {\n    queryStringParameters['format'] = 'export';\n    return Promise.all([this.authTokenProvider_.getToken( /*forceRefresh=*/false), this.appCheckTokenProvider_.getToken( /*forceRefresh=*/false)]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n      const url = (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host + pathString + '?' + 'ns=' + this.repoInfo_.namespace + querystring(queryStringParameters);\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n      xhr.open('GET', url, /*asynchronous=*/true);\n      xhr.send();\n    });\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\nclass SnapshotHolder {\n  constructor() {\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n  getNode(path) {\n    return this.rootNode_.getChild(path);\n  }\n  updateSnapshot(path, newSnapshotNode) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newSparseSnapshotTree() {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\nclass StatsListener {\n  constructor(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n  get() {\n    const newStats = this.collection_.get();\n    const delta = Object.assign({}, newStats);\n    if (this.last_) {\n      each(this.last_, (stat, value) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n    return delta;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\nclass StatsReporter {\n  constructor(collection, server_) {\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    const timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n  reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats = {};\n    let haveStatsToReport = false;\n    each(stats, (stat, value) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n    // queue our next run.\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n *\r\n * @enum\r\n */\nvar OperationType = /*#__PURE__*/function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n  return OperationType;\n}(OperationType || {});\nfunction newOperationSourceUser() {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\nfunction newOperationSourceServer() {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\nfunction newOperationSourceServerTaggedQuery(queryId) {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass AckUserWrite {\n  /**\r\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n   */\n  constructor( /** @inheritDoc */path, /** @inheritDoc */affectedTree, /** @inheritDoc */revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n    this.source = newOperationSourceUser();\n  }\n  operationForChild(childName) {\n    if (!pathIsEmpty(this.path)) {\n      assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ListenComplete {\n  constructor(source, path) {\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Overwrite {\n  constructor(source, path, snap) {\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n    this.type = OperationType.OVERWRITE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Merge {\n  constructor( /** @inheritDoc */source, /** @inheritDoc */path, /** @inheritDoc */children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n    this.type = OperationType.MERGE;\n  }\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString() {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\nclass CacheNode {\n  constructor(node_, fullyInitialized_, filtered_) {\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\r\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n   */\n  isFullyInitialized() {\n    return this.fullyInitialized_;\n  }\n  /**\r\n   * Returns whether this node is potentially missing children due to a filter applied to the node\r\n   */\n  isFiltered() {\n    return this.filtered_;\n  }\n  isCompleteForPath(path) {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n  isCompleteForChild(key) {\n    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n  }\n  getNode() {\n    return this.node_;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\nclass EventGenerator {\n  constructor(query_) {\n    this.query_ = query_;\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\n  const events = [];\n  const moves = [];\n  changes.forEach(change => {\n    if (change.type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* ChangeType.CHILD_REMOVED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* ChangeType.CHILD_ADDED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* ChangeType.CHILD_MOVED */, moves, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* ChangeType.CHILD_CHANGED */, changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* ChangeType.VALUE */, changes, eventRegistrations, eventCache);\n  return events;\n}\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n  filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(registration.createEvent(materializedChange, eventGenerator.query_));\n      }\n    });\n  });\n}\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\n    return change;\n  }\n}\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newViewCache(eventCache, serverCache) {\n  return {\n    eventCache,\n    serverCache\n  };\n}\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\n  return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\n}\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\n  return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\n}\nfunction viewCacheGetCompleteEventSnap(viewCache) {\n  return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;\n}\nfunction viewCacheGetCompleteServerSnap(viewCache) {\n  return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet emptyChildrenSingleton;\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\nconst EmptyChildren = () => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n  return emptyChildrenSingleton;\n};\n/**\r\n * A tree with immutable elements.\r\n */\nclass ImmutableTree {\n  constructor(value, children = EmptyChildren()) {\n    this.value = value;\n    this.children = children;\n  }\n  static fromObject(obj) {\n    let tree = new ImmutableTree(null);\n    each(obj, (childPath, childSnap) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n  /**\r\n   * True if the value is empty and there are no children\r\n   */\n  isEmpty() {\n    return this.value === null && this.children.isEmpty();\n  }\n  /**\r\n   * Given a path and predicate, return the first node and the path to that node\r\n   * where the predicate returns true.\r\n   *\r\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n   *\r\n   * @param relativePath - The remainder of the path\r\n   * @param predicate - The predicate to satisfy to return a node\r\n   */\n  findRootMostMatchingPathAndValue(relativePath, predicate) {\n    if (this.value != null && predicate(this.value)) {\n      return {\n        path: newEmptyPath(),\n        value: this.value\n      };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\n            return {\n              path: fullPath,\n              value: childExistingPathAndValue.value\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n  /**\r\n   * Find, if it exists, the shortest subpath of the given path that points a defined\r\n   * value in the tree\r\n   */\n  findRootMostValueAndPath(relativePath) {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n  /**\r\n   * @returns The subtree at the given path\r\n   */\n  subtree(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\r\n   * Sets a value at the specified path.\r\n   *\r\n   * @param relativePath - Path to set value at.\r\n   * @param toSet - Value to set.\r\n   * @returns Resulting tree.\r\n   */\n  set(relativePath, toSet) {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\r\n   * Removes the value at the specified path.\r\n   *\r\n   * @param relativePath - Path to value to remove.\r\n   * @returns Resulting tree.\r\n   */\n  remove(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n  /**\r\n   * Gets a value from the tree.\r\n   *\r\n   * @param relativePath - Path to get value for.\r\n   * @returns Value at path, or null.\r\n   */\n  get(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n  /**\r\n   * Replace the subtree at the specified path with the given new tree.\r\n   *\r\n   * @param relativePath - Path to replace subtree for.\r\n   * @param newTree - New tree.\r\n   * @returns Resulting tree.\r\n   */\n  setTree(relativePath, newTree) {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\r\n   * Performs a depth first fold on this tree. Transforms a tree into a single\r\n   * value, given a function that operates on the path to a node, an optional\r\n   * current value, and a map of child names to folded subtrees\r\n   */\n  fold(fn) {\n    return this.fold_(newEmptyPath(), fn);\n  }\n  /**\r\n   * Recursive helper for public-facing fold() method\r\n   */\n  fold_(pathSoFar, fn) {\n    const accum = {};\n    this.children.inorderTraversal((childKey, childTree) => {\n      accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  }\n  /**\r\n   * Find the first matching value on the given path. Return the result of applying f to it.\r\n   */\n  findOnPath(path, f) {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n  findOnPath_(pathToFollow, pathSoFar, f) {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow);\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n  foreachOnPath(path, f) {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n  foreachOnPath_(pathToFollow, currentRelativePath, f) {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\r\n   * Calls the given function for each node in the tree that has a value.\r\n   *\r\n   * @param f - A function to be called with the path from the root of the tree to\r\n   * a node, and the value at that node. Called in depth-first order.\r\n   */\n  foreach(f) {\n    this.foreach_(newEmptyPath(), f);\n  }\n  foreach_(currentRelativePath, f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n  foreachChild(f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value) {\n        f(childName, childTree.value);\n      }\n    });\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\nclass CompoundWrite {\n  constructor(writeTree_) {\n    this.writeTree_ = writeTree_;\n  }\n  static empty() {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\n  let newWrite = compoundWrite;\n  each(updates, (childKey, node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\n    return new CompoundWrite(newWriteTree);\n  }\n}\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\n  const children = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n        children.push(new NamedNode(childName, childNode));\n      });\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value != null) {\n        children.push(new NamedNode(childName, childTree.value));\n      }\n    });\n  }\n  return children;\n}\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\nfunction compoundWriteIsEmpty(compoundWrite) {\n  return compoundWrite.writeTree_.isEmpty();\n}\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\nfunction compoundWriteApply(compoundWrite, node) {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\n    }\n    return node;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\nfunction writeTreeChildWrites(writeTree, path) {\n  return newWriteTreeRef(path, writeTree);\n}\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\n  }\n  writeTree.lastWriteId = writeId;\n}\n/**\r\n * Record a new merge from user code.\r\n */\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n  writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\n  writeTree.lastWriteId = writeId;\n}\nfunction writeTreeGetWrite(writeTree, writeId) {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\nfunction writeTreeRemoveWrite(writeTree, writeId) {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n  let i = writeTree.allWrites.length - 1;\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (i >= idx && writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\n    } else {\n      const children = writeToRemove.children;\n      each(children, childName => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\n      });\n    }\n    return true;\n  }\n}\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (writeRecord.children.hasOwnProperty(childName) && pathContains(pathChild(writeRecord.path, childName), path)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\nfunction writeTreeResetTree_(writeTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\nfunction writeTreeDefaultFilter_(write) {\n  return write.visible;\n}\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\n        } else ;\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\n            }\n          }\n        } else ;\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (completeServerCache == null && !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (!includeHiddenWrites && completeServerCache == null && !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\n        return null;\n      } else {\n        const filter = function (write) {\n          return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (pathContains(write.path, treePath) || pathContains(treePath, write.path));\n        };\n        const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\n  let completeChildren = ChildrenNode.EMPTY_NODE;\n  const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\n      completeChildren = completeChildren.updateImmediateChild(childName, node);\n    });\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  }\n}\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\n  assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\n    }\n  }\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n      return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\n    } else {\n      return null;\n    }\n  }\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\nfunction writeTreeShadowingWrite(writeTree, path) {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\n  let toIterate;\n  const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\nfunction newWriteTree() {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n}\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\n  return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\n}\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\n  return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\n}\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\n  return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\n}\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\n  return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\n}\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\n  return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\n}\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\nfunction writeTreeRefChild(writeTreeRef, childName) {\n  return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\n}\nfunction newWriteTreeRef(path, writeTree) {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ChildChangeAccumulator {\n  constructor() {\n    this.changeMap = new Map();\n  }\n  trackChildChange(change) {\n    const type = change.type;\n    const childKey = change.childName;\n    assert(type === \"child_added\" /* ChangeType.CHILD_ADDED */ || type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ || type === \"child_removed\" /* ChangeType.CHILD_REMOVED */, 'Only child changes supported for tracking');\n    assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type === \"child_added\" /* ChangeType.CHILD_ADDED */ && oldType === \"child_removed\" /* ChangeType.CHILD_REMOVED */) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\n      } else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ && oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\n        this.changeMap.delete(childKey);\n      } else if (type === \"child_removed\" /* ChangeType.CHILD_REMOVED */ && oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\n        this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\n      } else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ && oldType === \"child_added\" /* ChangeType.CHILD_ADDED */) {\n        this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\n      } else if (type === \"child_changed\" /* ChangeType.CHILD_CHANGED */ && oldType === \"child_changed\" /* ChangeType.CHILD_CHANGED */) {\n        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\n      } else {\n        throw assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n  getChanges() {\n    return Array.from(this.changeMap.values());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass NoCompleteChildSource_ {\n  getCompleteChild(childKey) {\n    return null;\n  }\n  getChildAfterChild(index, child, reverse) {\n    return null;\n  }\n}\n/**\r\n * Singleton instance.\r\n */\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\nclass WriteTreeCompleteChildSource {\n  constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n  getCompleteChild(childKey) {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(index, child, reverse) {\n    const completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newViewProcessor(filter) {\n  return {\n    filter\n  };\n}\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\n  assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\n  assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\n}\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path);\n      newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return {\n    viewCache: newViewCache,\n    changes\n  };\n}\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n      accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\n    }\n  }\n}\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\n  }\n}\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (!oldServerSnap.isCompleteForPath(changePath) && pathGetLength(changePath) > 1) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n    } else {\n      newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\n  const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\n}\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\n    newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\n      newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (pathGetBack(childChangePath) === '.priority' && childNode.getChild(pathParent(childChangePath)).isEmpty()) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  return curViewCache;\n}\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) {\n    return viewCache;\n  }\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  return curViewCache;\n}\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n      return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n      }\n    });\n    return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n  }\n}\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n}\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n        newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\n      }\n      newNode = newNode;\n      newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n      if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\n        }\n      }\n    }\n    complete = viewCache.serverCache.isFullyInitialized() || writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\nclass View {\n  constructor(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    const params = this.query_._queryParams;\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n    this.processor_ = newViewProcessor(filter);\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n  get query() {\n    return this.query_;\n  }\n}\nfunction viewGetServerCache(view) {\n  return view.viewCache_.serverCache.getNode();\n}\nfunction viewGetCompleteNode(view) {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\nfunction viewGetCompleteServerCache(view, path) {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (view.query._queryParams.loadsAllData() || !pathIsEmpty(path) && !cache.getImmediateChild(pathGetFront(path)).isEmpty()) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\nfunction viewIsEmpty(view) {\n  return view.eventRegistrations_.length === 0;\n}\nfunction viewAddEventRegistration(view, eventRegistration) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\n  const cancelEvents = [];\n  if (cancelError) {\n    assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\n  if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n    assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\n    assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\n  }\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n  assert(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n  view.viewCache_ = result.viewCache;\n  return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\n}\nfunction viewGetInitialEvents(view, registration) {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode();\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\n}\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\n  const registrations = eventRegistration ? [eventRegistration] : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet referenceConstructor$1;\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\nclass SyncPoint {\n  constructor() {\n    /**\r\n     * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n     * queryId and the value is the View for that query.\r\n     *\r\n     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n     */\n    this.views = new Map();\n  }\n}\nfunction syncPointSetReferenceConstructor(val) {\n  assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\n  referenceConstructor$1 = val;\n}\nfunction syncPointGetReferenceConstructor() {\n  assert(referenceConstructor$1, 'Reference.ts has not been loaded');\n  return referenceConstructor$1;\n}\nfunction syncPointIsEmpty(syncPoint) {\n  return syncPoint.views.size === 0;\n}\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\n  } else {\n    let events = [];\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\n    }\n    return events;\n  }\n}\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\n    return new View(query, viewCache);\n  }\n  return view;\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\n  const queryId = query._queryIdentifier;\n  const removed = [];\n  let cancelEvents = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\n  }\n  return {\n    removed,\n    events: cancelEvents\n  };\n}\nfunction syncPointGetQueryViews(syncPoint) {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\n  let serverCache = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\nfunction syncPointViewForQuery(syncPoint, query) {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\nfunction syncPointViewExistsForQuery(syncPoint, query) {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\nfunction syncPointHasCompleteView(syncPoint) {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\nfunction syncPointGetCompleteView(syncPoint) {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet referenceConstructor;\nfunction syncTreeSetReferenceConstructor(val) {\n  assert(!referenceConstructor, '__referenceConstructor has already been defined');\n  referenceConstructor = val;\n}\nfunction syncTreeGetReferenceConstructor() {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n/**\r\n * Static tracker for next query tag.\r\n */\nlet syncTreeNextQueryTag_ = 1;\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\nclass SyncTree {\n  /**\r\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n   *   to server data.\r\n   */\n  constructor(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\r\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n     */\n    this.syncPointTree_ = new ImmutableTree(null);\n    /**\r\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n     */\n    this.pendingWriteTree_ = newWriteTree();\n    this.tagToQueryMap = new Map();\n    this.queryToTagMap = new Map();\n  }\n}\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\n  // Record pending write.\n  writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\n  }\n}\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\n}\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, pathString => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\n  }\n}\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\n}\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\n}\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyListenComplete(syncTree, path) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\n}\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\r\n *  deduping needs to take place. This flag allows toggling of that behavior\r\n * @returns Cancel events, if cancelError was provided.\r\n */\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (maybeSyncPoint && (query._queryIdentifier === 'default' || syncPointViewExistsForQuery(maybeSyncPoint, query))) {\n    const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    if (!skipListenerDedup) {\n      /**\r\n       * We may have just removed one of many listeners and can short-circuit this whole process\r\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n       * properly set up.\r\n       */\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault = -1 !== removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n      const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag = null;\n          syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\n        } else {\n          removed.forEach(queryToRemove => {\n            const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  }\n  return cancelEvents;\n}\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\n  const path = query._path;\n  let serverCache = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(childName, completeCache);\n      }\n    });\n  }\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\n    const relativePath = newRelativePath(pathSoFar, path);\n    const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\n    if (serverCache) {\n      return serverCache;\n    }\n  });\n  return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\n}\nfunction syncTreeGetServerValue(syncTree, query) {\n  const path = query._path;\n  let serverCache = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode = serverCacheComplete ? new CacheNode(serverCache, true, false) : null;\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\n  return viewGetCompleteNode(view);\n}\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\n  return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, /*serverCache=*/null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    let events = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n    if (syncPoint) {\n      events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n    }\n    return events;\n  }\n}\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  let events = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n  });\n  if (syncPoint) {\n    events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n  }\n  return events;\n}\nfunction syncTreeCreateListenerForView_(syncTree, view) {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: status => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(syncTree, query, /*eventRegistration*/null, error);\n      }\n    }\n  };\n}\n/**\r\n * Return the tag associated with the given query.\r\n */\nfunction syncTreeTagForQuery(syncTree, query) {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\nfunction syncTreeMakeQueryKey_(query) {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\n  return syncTree.tagToQueryMap.get(tag);\n}\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\nfunction syncTreeParseQueryKey_(queryKey) {\n  const splitIndex = queryKey.indexOf('$');\n  assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n/**\r\n * A helper method to apply tagged operations\r\n */\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\n  return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key, childViews) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\nfunction syncTreeQueryForListening_(query) {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\nfunction syncTreeRemoveTags_(syncTree, queries) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n/**\r\n * Static accessor for query tags.\r\n */\nfunction syncTreeGetNextQueryTag_() {\n  return syncTreeNextQueryTag_++;\n}\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\nfunction syncTreeSetupListener_(syncTree, query, view) {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n  const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n      if (!pathIsEmpty(relativePath) && maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n        return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n      } else {\n        // No default listener here, flatten any deeper queries into an array\n        let queries = [];\n        if (maybeChildSyncPoint) {\n          queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\n        }\n        each(childMap, (_key, childQueries) => {\n          queries = queries.concat(childQueries);\n        });\n        return queries;\n      }\n    });\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\n    }\n  }\n  return events;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ExistingValueProvider {\n  constructor(node_) {\n    this.node_ = node_;\n  }\n  getImmediateChild(childName) {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n  node() {\n    return this.node_;\n  }\n}\nclass DeferredValueProvider {\n  constructor(syncTree, path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n  getImmediateChild(childName) {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n  node() {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n/**\r\n * Generate placeholders for deferred values.\r\n */\nconst generateWithValues = function (values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'];\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\nconst resolveComplexDeferredValue = function (op, existing, unused) {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n  const existingNode = existing.node();\n  assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n  const leaf = existingNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n  const rawPri = node.getPriority().val();\n  const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n  let newNode;\n  if (node.isLeafNode()) {\n    const leafNode = node;\n    const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\nclass Tree {\n  /**\r\n   * @param name - Optional name of the node.\r\n   * @param parent - Optional parent node.\r\n   * @param node - Optional node to wrap.\r\n   */\n  constructor(name = '', parent = null, node = {\n    children: {},\n    childCount: 0\n  }) {\n    this.name = name;\n    this.parent = parent;\n    this.node = node;\n  }\n}\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\nfunction treeSubTree(tree, pathObj) {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n  return child;\n}\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\nfunction treeGetValue(tree) {\n  return tree.node.value;\n}\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\nfunction treeSetValue(tree, value) {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n/**\r\n * @returns Whether the tree has any children.\r\n */\nfunction treeHasChildren(tree) {\n  return tree.node.childCount > 0;\n}\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\nfunction treeIsEmpty(tree) {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\nfunction treeForEachChild(tree, action) {\n  each(tree.node.children, (child, childTree) => {\n    action(new Tree(child, tree, childTree));\n  });\n}\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\nfunction treeForEachAncestor(tree, action, includeSelf) {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\nfunction treeGetPath(tree) {\n  return new Path(tree.parent === null ? tree.name : treeGetPath(tree.parent) + '/' + tree.name);\n}\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\nfunction treeUpdateParents(tree) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\nfunction treeUpdateChild(tree, childName, child) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * True for invalid Firebase keys\r\n */\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\nconst isValidKey = function (key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\nconst isValidPathString = function (pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\nconst isValidRootPathString = function (pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n  return isValidPathString(pathString);\n};\nconst isValidPriority = function (priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' &&\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  contains(priority, '.sv');\n};\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\n  if (optional && value === undefined) {\n    return;\n  }\n  validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\n};\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\nconst validateFirebaseData = function (errorPrefix, data, path_) {\n  const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\n  }\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + validationPathToErrorString(path) + ' with contents = ' + data.toString());\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + validationPathToErrorString(path));\n  }\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + validationPathToErrorString(path) + \" ('\" + data.substring(0, 50) + \"...')\");\n  }\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key, value) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + validationPathToErrorString(path) + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n    if (hasDotValue && hasActualChild) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + validationPathToErrorString(path) + ' in addition to actual children.');\n    }\n  }\n};\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n  let i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  }\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n    prevPath = curPath;\n  }\n};\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n  const errorPrefix$1 = errorPrefix(fnName, 'values');\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n  }\n  const mergePaths = [];\n  each(data, (key, value) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix$1 + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\nconst validatePriority = function (fnName, priority, optional) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n  }\n};\nconst validateKey = function (fnName, argumentName, key, optional) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n  }\n};\n/**\r\n * @internal\r\n */\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n  if (!isValidPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n  }\n};\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n/**\r\n * @internal\r\n */\nconst validateWritablePath = function (fnName, path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\nconst validateUrl = function (fnName, parsedUrl) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, 'url') + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\nclass EventQueue {\n  constructor() {\n    this.eventLists_ = [];\n    /**\r\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n     */\n    this.recursionDepth_ = 0;\n  }\n}\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n    if (currList === null) {\n      currList = {\n        events: [],\n        path\n      };\n    }\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\n}\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) || pathContains(changedPath, eventPath));\n}\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\n  eventQueue.recursionDepth_++;\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n  eventQueue.recursionDepth_--;\n}\n/**\r\n * Iterates through the list and raises each event\r\n */\nfunction eventListRaise(eventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst INTERRUPT_REASON = 'repo_interrupt';\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n/**\r\n * A connection to a single data repository.\r\n */\nclass Repo {\n  constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\n    this.repoInfo_ = repoInfo_;\n    this.forceRestClient_ = forceRestClient_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckProvider_ = appCheckProvider_;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null;\n    /** A list of data pieces and paths to be set when this client disconnects. */\n    this.onDisconnect_ = newSparseSnapshotTree();\n    /** Stores queues of outstanding transactions for Firebase locations. */\n    this.transactionQueueTree_ = new Tree();\n    // TODO: This should be @private but it's used by test_access.js and internal.js\n    this.persistentConnection_ = null;\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n  /**\r\n   * @returns The URL corresponding to the root of this Firebase.\r\n   */\n  toString() {\n    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n  }\n}\nfunction repoStart(repo, appId, authOverride) {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, repo.authTokenProvider_, repo.appCheckProvider_);\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n    repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, connectStatus => {\n      repoOnConnectStatus(repo, connectStatus);\n    }, updates => {\n      repoOnServerInfoUpdate(repo, updates);\n    }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\n    repo.server_ = repo.persistentConnection_;\n  }\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\nfunction repoServerTime(repo) {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = offsetNode.val() || 0;\n  return new Date().getTime() + offset;\n}\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\nfunction repoGenerateServerValues(repo) {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(data, raw => nodeFromJSON(raw));\n      events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\n    }\n  } else if (isMerge) {\n    const changedChildren = map(data, raw => nodeFromJSON(raw));\n    events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\nfunction repoOnConnectStatus(repo, connectStatus) {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\nfunction repoOnServerInfoUpdate(repo, updates) {\n  each(updates, (key, value) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\nfunction repoUpdateInfo(repo, pathString, value) {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\nfunction repoGetNextWriteId(repo) {\n  return repo.nextWriteId_++;\n}\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will wait until the\r\n *  repo has established a connection and then request the value for `query`.\r\n * If the client is not able to retrieve the query result for another reason,\r\n * it reports an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\nfunction repoGetValue(repo, query, eventRegistration) {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(payload => {\n    const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\n    /**\r\n     * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\r\n     * Add an event registration,\r\n     * Update data at the path,\r\n     * Raise any events,\r\n     * Cleanup the SyncTree\r\n     */\n    syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\n    let events;\n    if (query._queryParams.loadsAllData()) {\n      events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n    } else {\n      const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\n    }\n    /*\r\n     * We need to raise events in the scenario where `get()` is called at a parent path, and\r\n     * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\r\n     * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\r\n     * and its corresponding serverCache, including the child location where `onValue` is called. Then,\r\n     * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\r\n     * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\r\n     * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\r\n     * ensure the corresponding child events will get fired.\r\n     */\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n    syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\n    return node;\n  }, err => {\n    repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n    return Promise.reject(new Error(err));\n  });\n}\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(path.toString(), newNodeUnresolved.val( /*export=*/true), (status, errorReason) => {\n    const success = status === 'ok';\n    if (!success) {\n      warn('set at ' + path + ' failed: ' + status);\n    }\n    const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\n  repoLog(repo, 'update', {\n    path: path.toString(),\n    value: childrenToMerge\n  });\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren = {};\n  each(childrenToMerge, (changedKey, changedValue) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\n  });\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('update at ' + path + ' failed: ' + status);\n      }\n      const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n      const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n    each(childrenToMerge, changedPath => {\n      const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\n      repoRerunTransactions(repo, affectedPath);\n    });\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\nfunction repoRunOnDisconnectEvents(repo) {\n  repoLog(repo, 'onDisconnectEvents');\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\n    const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\n    sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n  });\n  let events = [];\n  sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\n    events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\n    const affectedPath = repoAbortTransactions(repo, path);\n    repoRerunTransactions(repo, affectedPath);\n  });\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val( /*export=*/true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val( /*export=*/true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n  repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\n    if (status === 'ok') {\n      each(childrenToMerge, (childName, childNode) => {\n        const newChildNode = nodeFromJSON(childNode);\n        sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\n      });\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoInterrupt(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\nfunction repoResume(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\nfunction repoLog(repo, ...varArgs) {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n        const error = new Error(message);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        error.code = code;\n        callback(error);\n      }\n    });\n  }\n}\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\n  repoLog(repo, 'transaction on ' + path);\n  // Initialize transaction.\n  const transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\n    // Mark as run and add to our queue.\n    transaction.status = 0 /* TransactionStatus.RUN */;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n    treeSetValue(queueNode, nodeQueue);\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (typeof newVal === 'object' && newVal !== null && contains(newVal, '.priority')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal, '.priority');\n      assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\nfunction repoGetLatestState(repo, path, excludeSets) {\n  return syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || ChildrenNode.EMPTY_NODE;\n}\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n    const allRun = queue.every(transaction => transaction.status === 0 /* TransactionStatus.RUN */);\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\nfunction repoSendTransactionQueue(repo, path, queue) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(txn.status === 0 /* TransactionStatus.RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = 1 /* TransactionStatus.SENT */;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\n  }\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n  // Send the put.\n  repo.server_.put(pathToSend.toString(), dataToSend, status => {\n    repoLog(repo, 'transaction put response', {\n      path: pathToSend.toString(),\n      status\n    });\n    let events = [];\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our\n      // transaction state, since the callback could trigger more\n      // transactions or sets.\n      const callbacks = [];\n      for (let i = 0; i < queue.length; i++) {\n        queue[i].status = 2 /* TransactionStatus.COMPLETED */;\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\n        if (queue[i].onComplete) {\n          // We never unset the output snapshot, and given that this\n          // transaction is complete, it should be set\n          callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\n        }\n        queue[i].unwatcher();\n      }\n      // Now remove the completed transactions.\n      repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\n      // There may be pending transactions that we can now send.\n      repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n      // Finally, trigger onComplete callbacks.\n      for (let i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (let i = 0; i < queue.length; i++) {\n          if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) {\n            queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\n          } else {\n            queue[i].status = 0 /* TransactionStatus.RUN */;\n          }\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = 4 /* TransactionStatus.NEEDS_ABORT */;\n          queue[i].abortReason = status;\n        }\n      }\n      repoRerunTransactions(repo, path);\n    }\n  }, latestHash);\n}\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\nfunction repoRerunTransactions(repo, changedPath) {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\n  const path = treeGetPath(rootMostTransactionNode);\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n  return path;\n}\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\nfunction repoRerunTransactionQueue(repo, queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === 0 /* TransactionStatus.RUN */;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n    if (transaction.status === 4 /* TransactionStatus.NEEDS_ABORT */) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n    } else if (transaction.status === 0 /* TransactionStatus.RUN */) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority = typeof newData === 'object' && newData != null && contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = 2 /* TransactionStatus.COMPLETED */;\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\n        } else {\n          callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\n        }\n      }\n    }\n  }\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\nfunction repoGetAncestorTransactionNode(repo, path) {\n  let front;\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n  return transactionNode;\n}\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\nfunction repoBuildTransactionQueue(repo, transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue = [];\n  repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n  return transactionQueue;\n}\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== 2 /* TransactionStatus.COMPLETED */) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\nfunction repoAbortTransactions(repo, path) {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n  treeForEachAncestor(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  repoAbortTransactionsOnNode(repo, transactionNode);\n  treeForEachDescendant(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  return affectedPath;\n}\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\nfunction repoAbortTransactionsOnNode(repo, node) {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === 3 /* TransactionStatus.SENT_NEEDS_ABORT */) ;else if (queue[i].status === 1 /* TransactionStatus.SENT */) {\n        assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = 3 /* TransactionStatus.SENT_NEEDS_ABORT */;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(queue[i].status === 0 /* TransactionStatus.RUN */, 'Unexpected transaction status in abort');\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\n        if (queue[i].onComplete) {\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction decodePath(pathString) {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n/**\r\n * @returns key value hash\r\n */\nfunction decodeQuery(queryString) {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  }\n  // Catch common error of uninitialized namespace value.\n  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, /*persistenceKey=*/'', /*includeNamespaceInQueryParams=*/namespace !== parsedUrl.subdomain),\n    path: new Path(parsedUrl.pathString)\n  };\n};\nconst parseDatabaseURL = function (dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\nconst nextPushId = function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars = [];\n  return function (now) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n    let id = timeStampChars.join('');\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\nclass DataEvent {\n  /**\r\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n   * @param eventRegistration - The function to call to with the event data. User provided\r\n   * @param snapshot - The data backing the event\r\n   * @param prevName - Optional, the name of the previous child for child_* events.\r\n   */\n  constructor(eventType, eventRegistration, snapshot, prevName) {\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n  getPath() {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType() {\n    return this.eventType;\n  }\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString() {\n    return this.getPath().toString() + ':' + this.eventType + ':' + stringify(this.snapshot.exportVal());\n  }\n}\nclass CancelEvent {\n  constructor(eventRegistration, error, path) {\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n  getPath() {\n    return this.path;\n  }\n  getEventType() {\n    return 'cancel';\n  }\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString() {\n    return this.path.toString() + ':cancel';\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\nclass CallbackContext {\n  constructor(snapshotCallback, cancelCallback) {\n    this.snapshotCallback = snapshotCallback;\n    this.cancelCallback = cancelCallback;\n  }\n  onValue(expDataSnapshot, previousChildName) {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n  onCancel(error) {\n    assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\n    return this.cancelCallback.call(null, error);\n  }\n  get hasCancelCallback() {\n    return !!this.cancelCallback;\n  }\n  matches(other) {\n    return this.snapshotCallback === other.snapshotCallback || this.snapshotCallback.userCallback !== undefined && this.snapshotCallback.userCallback === other.snapshotCallback.userCallback && this.snapshotCallback.context === other.snapshotCallback.context;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\nclass OnDisconnect {\n  /** @hideconstructor */\n  constructor(_repo, _path) {\n    this._repo = _repo;\n    this._path = _path;\n  }\n  /**\r\n   * Cancels all previously queued `onDisconnect()` set or update events for this\r\n   * location and all children.\r\n   *\r\n   * If a write has been queued for this location via a `set()` or `update()` at a\r\n   * parent location, the write at this location will be canceled, though writes\r\n   * to sibling locations will still occur.\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n  cancel() {\n    const deferred = new Deferred();\n    repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is deleted when the client is disconnected\r\n   * (due to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * @returns Resolves when synchronization to the server is complete.\r\n   */\n  remove() {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is set to the specified value when the\r\n   * client is disconnected (due to closing the browser, navigating to a new page,\r\n   * or network issues).\r\n   *\r\n   * `set()` is especially useful for implementing \"presence\" systems, where a\r\n   * value should be changed or cleared when a user disconnects so that they\r\n   * appear \"offline\" to other users. See\r\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n   * for more information.\r\n   *\r\n   * Note that `onDisconnect` operations are only triggered once. If you want an\r\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n   * the `onDisconnect` operations each time.\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  set(value) {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Ensures the data at this location is set to the specified value and priority\r\n   * when the client is disconnected (due to closing the browser, navigating to a\r\n   * new page, or network issues).\r\n   *\r\n   * @param value - The value to be written to this location on disconnect (can\r\n   * be an object, array, string, number, boolean, or null).\r\n   * @param priority - The priority to be written (string, number, or null).\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  setWithPriority(value, priority) {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\r\n   * Writes multiple values at this location when the client is disconnected (due\r\n   * to closing the browser, navigating to a new page, or network issues).\r\n   *\r\n   * The `values` argument contains multiple property-value pairs that will be\r\n   * written to the Database together. Each child property can either be a simple\r\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n   * from the current location to the data to update.\r\n   *\r\n   * As opposed to the `set()` method, `update()` can be use to selectively update\r\n   * only the referenced properties at the current location (instead of replacing\r\n   * all the child properties at the current location).\r\n   *\r\n   * @param values - Object containing multiple values.\r\n   * @returns Resolves when synchronization to the Database is complete.\r\n   */\n  update(values) {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @internal\r\n */\nclass QueryImpl {\n  /**\r\n   * @hideconstructor\r\n   */\n  constructor(_repo, _path, _queryParams, _orderByCalled) {\n    this._repo = _repo;\n    this._path = _path;\n    this._queryParams = _queryParams;\n    this._orderByCalled = _orderByCalled;\n  }\n  get key() {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n  get ref() {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n  get _queryIdentifier() {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n  /**\r\n   * An object representation of the query parameters used by this Query.\r\n   */\n  get _queryObject() {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n  isEqual(other) {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n  toJSON() {\n    return this.toString();\n  }\n  toString() {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n/**\r\n * Validates that no other order by call has been made\r\n */\nfunction validateNoPreviousOrderByCall(query, fnName) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n/**\r\n * Validates start/end values for queries.\r\n */\nfunction validateQueryEndpoints(params) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' + 'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n      throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' + '(null, a number, or a string).');\n    }\n  } else {\n    assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n    if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n      throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' + 'equalTo() cannot be an object.');\n    }\n  }\n}\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\nfunction validateLimit(params) {\n  if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n    throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" + 'limitToFirst() or limitToLast() instead.');\n  }\n}\n/**\r\n * @internal\r\n */\nclass ReferenceImpl extends QueryImpl {\n  /** @hideconstructor */\n  constructor(repo, path) {\n    super(repo, path, new QueryParams(), false);\n  }\n  get parent() {\n    const parentPath = pathParent(this._path);\n    return parentPath === null ? null : new ReferenceImpl(this._repo, parentPath);\n  }\n  get root() {\n    let ref = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\nclass DataSnapshot {\n  /**\r\n   * @param _node - A SnapshotNode to wrap.\r\n   * @param ref - The location this snapshot came from.\r\n   * @param _index - The iteration order for this snapshot\r\n   * @hideconstructor\r\n   */\n  constructor(_node,\n  /**\r\n   * The location of this DataSnapshot.\r\n   */\n  ref, _index) {\n    this._node = _node;\n    this.ref = ref;\n    this._index = _index;\n  }\n  /**\r\n   * Gets the priority value of the data in this `DataSnapshot`.\r\n   *\r\n   * Applications need not use priority but can order collections by\r\n   * ordinary properties (see\r\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n   * ).\r\n   */\n  get priority() {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val();\n  }\n  /**\r\n   * The key (last part of the path) of the location of this `DataSnapshot`.\r\n   *\r\n   * The last token in a Database location is considered its key. For example,\r\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n   * `DataSnapshot` will return the key for the location that generated it.\r\n   * However, accessing the key on the root URL of a Database will return\r\n   * `null`.\r\n   */\n  get key() {\n    return this.ref.key;\n  }\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size() {\n    return this._node.numChildren();\n  }\n  /**\r\n   * Gets another `DataSnapshot` for the location at the specified relative path.\r\n   *\r\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n   * another `DataSnapshot` for the location at the specified relative path. The\r\n   * relative path can either be a simple child name (for example, \"ada\") or a\r\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n   * whose value is `null`) is returned.\r\n   *\r\n   * @param path - A relative path to the location of child data.\r\n   */\n  child(path) {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\n  }\n  /**\r\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n   * efficient than using `snapshot.val() !== null`.\r\n   */\n  exists() {\n    return !this._node.isEmpty();\n  }\n  /**\r\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n   *\r\n   * The `exportVal()` method is similar to `val()`, except priority information\r\n   * is included (if available), making it suitable for backing up your data.\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal() {\n    return this._node.val(true);\n  }\n  /**\r\n   * Enumerates the top-level children in the `IteratedDataSnapshot`.\r\n   *\r\n   * Because of the way JavaScript objects work, the ordering of data in the\r\n   * JavaScript object returned by `val()` is not guaranteed to match the\r\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n   * where `forEach()` comes in handy. It guarantees the children of a\r\n   * `DataSnapshot` will be iterated in their query order.\r\n   *\r\n   * If no explicit `orderBy*()` method is used, results are returned\r\n   * ordered by key (unless priorities are used, in which case, results are\r\n   * returned by priority).\r\n   *\r\n   * @param action - A function that will be called for each child DataSnapshot.\r\n   * The callback can return true to cancel further enumeration.\r\n   * @returns true if enumeration was canceled due to your callback returning\r\n   * true.\r\n   */\n  forEach(action) {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n    const childrenNode = this._node;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\n    });\n  }\n  /**\r\n   * Returns true if the specified child path has (non-null) data.\r\n   *\r\n   * @param path - A relative path to the location of a potential child.\r\n   * @returns `true` if data exists at the specified child path; else\r\n   *  `false`.\r\n   */\n  hasChild(path) {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n  /**\r\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n   * properties.\r\n   *\r\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n   * children. If it does, you can enumerate them using `forEach()`. If it\r\n   * doesn't, then either this snapshot contains a primitive value (which can be\r\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n   * `null`).\r\n   *\r\n   * @returns true if this snapshot has any children; else false.\r\n   */\n  hasChildren() {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n  /**\r\n   * Returns a JSON-serializable representation of this object.\r\n   */\n  toJSON() {\n    return this.exportVal();\n  }\n  /**\r\n   * Extracts a JavaScript value from a `DataSnapshot`.\r\n   *\r\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n   * scalar type (string, number, or boolean), an array, or an object. It may\r\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n   * data).\r\n   *\r\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n   *   Array, string, number, boolean, or `null`).\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val() {\n    return this._node.val();\n  }\n}\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\nfunction ref(db, path) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\nfunction refFromURL(db, url) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n  const repoInfo = parsedURL.repoInfo;\n  if (!db._repo.repoInfo_.isCustomHost() && repoInfo.host !== db._repo.repoInfo_.host) {\n    fatal('refFromURL' + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + db._repo.repoInfo_.host + ')');\n  }\n  return ref(db, parsedURL.path.toString());\n}\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\nfunction child(parent, path) {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\nfunction onDisconnect(ref) {\n  ref = getModularInstance(ref);\n  return new OnDisconnect(ref._repo, ref._path);\n}\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\r\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\nfunction push(parent, value) {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef = child(parent, name);\n  const pushRef = child(parent, name);\n  let promise;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef;\n}\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\nfunction remove(ref) {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction set(ref, value) {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, /*priority=*/null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction setPriority(ref, priority) {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\nfunction setWithPriority(ref, value, priority) {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\nfunction update(ref, values) {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred();\n  repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\nfunction get(query) {\n  query = getModularInstance(query);\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\n  });\n}\n/**\r\n * Represents registration for 'value' events.\r\n */\nclass ValueEventRegistration {\n  constructor(callbackContext) {\n    this.callbackContext = callbackContext;\n  }\n  respondsTo(eventType) {\n    return eventType === 'value';\n  }\n  createEvent(change, query) {\n    const index = query._queryParams.getIndex();\n    return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\n  }\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, null);\n    }\n  }\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n  matches(other) {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n  hasAnyCallback() {\n    return this.callbackContext !== null;\n  }\n}\n/**\r\n * Represents the registration of a child_x event.\r\n */\nclass ChildEventRegistration {\n  constructor(eventType, callbackContext) {\n    this.eventType = eventType;\n    this.callbackContext = callbackContext;\n  }\n  respondsTo(eventType) {\n    let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n  createEvent(change, query) {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\n    const index = query._queryParams.getIndex();\n    return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\n  }\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\n    }\n  }\n  matches(other) {\n    if (other instanceof ChildEventRegistration) {\n      return this.eventType === other.eventType && (!this.callbackContext || !other.callbackContext || this.callbackContext.matches(other.callbackContext));\n    }\n    return false;\n  }\n  hasAnyCallback() {\n    return !!this.callbackContext;\n  }\n}\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\n  let cancelCallback;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n  const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\n  const container = eventType === 'value' ? new ValueEventRegistration(callbackContext) : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\n}\n/**\r\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\r\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\r\n * the respective `on*` callbacks.\r\n *\r\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\nfunction off(query, eventType, callback) {\n  let container = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\nclass QueryConstraint {}\nclass QueryEndAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n    this.type = 'endAt';\n  }\n  _apply(query) {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endAt: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\nfunction endAt(value, key) {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n    this.type = 'endBefore';\n  }\n  _apply(query) {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endBefore: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value less than or equal\r\n * to the specified value and a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\nfunction endBefore(value, key) {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\nclass QueryStartAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n    this.type = 'startAt';\n  }\n  _apply(query) {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAt: Starting point was already set (by another call to startAt, ' + 'startBefore or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\nfunction startAt(value = null, key) {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\nclass QueryStartAfterConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n    this.type = 'startAfter';\n  }\n  _apply(query) {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAfter: Starting point was already set (by another call to startAt, ' + 'startAfter, or equalTo).');\n    }\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n}\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\nfunction startAfter(value, key) {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n    this.type = 'limitToFirst';\n  }\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\nfunction limitToFirst(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n    this.type = 'limitToLast';\n  }\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\nfunction limitToLast(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n  return new QueryLimitToLastConstraint(limit);\n}\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  constructor(_path) {\n    super();\n    this._path = _path;\n    this.type = 'orderByChild';\n  }\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\nfunction orderByChild(path) {\n  if (path === '$key') {\n    throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\n  } else if (path === '$priority') {\n    throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\n  } else if (path === '$value') {\n    throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  constructor() {\n    super(...arguments);\n    this.type = 'orderByKey';\n  }\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\nfunction orderByKey() {\n  return new QueryOrderByKeyConstraint();\n}\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  constructor() {\n    super(...arguments);\n    this.type = 'orderByPriority';\n  }\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\nfunction orderByPriority() {\n  return new QueryOrderByPriorityConstraint();\n}\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  constructor() {\n    super(...arguments);\n    this.type = 'orderByValue';\n  }\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams, /*orderByCalled=*/true);\n  }\n}\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\nfunction orderByValue() {\n  return new QueryOrderByValueConstraint();\n}\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n    this.type = 'equalTo';\n  }\n  _apply(query) {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' + 'equalTo).');\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' + 'equalTo).');\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\n  }\n}\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\nfunction equalTo(value, key) {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\nfunction query(query, ...queryConstraints) {\n  let queryImpl = getModularInstance(query);\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n/**\r\n * Creates and caches `Repo` instances.\r\n */\nconst repos = {};\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\nlet useRestClient = false;\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\n  repo.repoInfo_ = new RepoInfo(`${host}:${port}`, /* secure= */false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams, /*isUsingEmulator=*/true);\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\n  let dbUrl = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\"Can't determine Firebase Database URL. Be sure to include \" + ' a Project ID when calling firebase.initializeApp().');\n    }\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n  let isEmulator;\n  let dbEmulatorHost = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n  const authTokenProvider = nodeAdmin && isEmulator ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER) : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n  }\n  const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\n  return new Database(repo, app);\n}\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\nfunction repoManagerDeleteRepo(repo, appName) {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\n  let appRepos = repos[app.name];\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n  return repo;\n}\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\nfunction repoManagerForceRestClient(forceRestClient) {\n  useRestClient = forceRestClient;\n}\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\nclass Database {\n  /** @hideconstructor */\n  constructor(_repoInternal, /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n  app) {\n    this._repoInternal = _repoInternal;\n    this.app = app;\n    /** Represents a `Database` instance. */\n    this['type'] = 'database';\n    /** Track if the instance has been used (root or repo accessed) */\n    this._instanceStarted = false;\n  }\n  get _repo() {\n    if (!this._instanceStarted) {\n      repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n  get _root() {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n  _delete() {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n  _checkNotDeleted(apiName) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\n  }\n}\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\nfunction forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\nfunction forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\nfunction getDatabase(app = getApp(), url) {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  });\n  if (!db._instanceStarted) {\n    const emulator = getDefaultEmulatorHostnameAndPort('database');\n    if (emulator) {\n      connectDatabaseEmulator(db, ...emulator);\n    }\n  }\n  return db;\n}\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal('Cannot call useEmulator() after instance has already been initialized.');\n  }\n  const repo = db._repoInternal;\n  let tokenProvider = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token = typeof options.mockUserToken === 'string' ? options.mockUserToken : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\nfunction goOffline(db) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\nfunction goOnline(db) {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\nfunction enableLogging(logger, persistent) {\n  enableLogging$1(logger, persistent);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction registerDatabase(variant) {\n  setSDKVersion(SDK_VERSION$1);\n  _registerComponent(new Component('database', (container, {\n    instanceIdentifier: url\n  }) => {\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const appCheckProvider = container.getProvider('app-check-internal');\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\nfunction serverTimestamp() {\n  return SERVER_TIMESTAMP;\n}\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\nfunction increment(delta) {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\nclass TransactionResult {\n  /** @hideconstructor */\n  constructor( /** Whether the transaction was successfully committed. */\n  committed, /** The resulting data snapshot. */\n  snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  }\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON() {\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  }\n}\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\nfunction runTransaction(ref,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate, options) {\n  var _a;\n  ref = getModularInstance(ref);\n  validateWritablePath('Reference.transaction', ref._path);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'Reference.transaction failed: ' + ref.key + ' is a read-only object.';\n  }\n  const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\n  const deferred = new Deferred();\n  const promiseComplete = (error, committed, node) => {\n    let dataSnapshot = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n  repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\n  return deferred.promise;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nPersistentConnection;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n};\n// RealTimeConnection properties that we use in tests.\nConnection;\n/**\r\n * @internal\r\n */\nconst hijackHash = function (newHash) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\nRepoInfo;\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\nconst forceRestClient = function (forceRestClient) {\n  repoManagerForceRestClient(forceRestClient);\n};\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n * @internal\r\n * @param app - A valid FirebaseApp-like object\r\n * @param url - A valid Firebase databaseURL\r\n * @param version - custom version e.g. firebase-admin version\r\n * @param customAppCheckImpl - custom app check implementation\r\n * @param customAuthImpl - custom auth implementation\r\n */\nfunction _initStandalone({\n  app,\n  url,\n  version,\n  customAuthImpl,\n  customAppCheckImpl,\n  nodeAdmin = false\n}) {\n  setSDKVersion(version);\n  /**\r\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n   * any actual function.\r\n   */\n  const componentContainer = new ComponentContainer('database-standalone');\n  const authProvider = new Provider('auth-internal', componentContainer);\n  let appCheckProvider;\n  if (customAppCheckImpl) {\n    appCheckProvider = new Provider('app-check-internal', componentContainer);\n    appCheckProvider.setComponent(new Component('app-check-internal', () => customAppCheckImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  }\n  authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin);\n}\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\nregisterDatabase();\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, _initStandalone, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n","import firebase from '@firebase/app-compat';\nimport { ComponentContainer, Provider, Component } from '@firebase/component';\nimport { _validatePathString, onChildMoved, onChildChanged, onChildRemoved, onChildAdded, onValue, off, get, query, limitToFirst, limitToLast, orderByChild, orderByKey, orderByPriority, orderByValue, startAt, startAfter, endAt, endBefore, equalTo, _ReferenceImpl, _QueryImpl, _QueryParams, child, set, _validateWritablePath, update, setWithPriority, remove, runTransaction, setPriority, push, OnDisconnect as OnDisconnect$1, forceWebSockets, forceLongPolling, connectDatabaseEmulator, refFromURL, ref, goOffline, goOnline, serverTimestamp, increment, _setSDKVersion, _repoManagerDatabaseFromApp, enableLogging } from '@firebase/database';\nimport { errorPrefix, validateArgCount, validateCallback, validateContextObject, Deferred } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\nconst name = \"@firebase/database-compat\";\nconst version = \"1.0.5\";\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst logClient = new Logger('@firebase/database-compat');\nconst warn = function (msg) {\n  const message = 'FIREBASE WARNING: ' + msg;\n  logClient.warn(message);\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst validateBoolean = function (fnName, argumentName, bool, optional) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(errorPrefix(fnName, argumentName) + 'must be a boolean.');\n  }\n};\nconst validateEventType = function (fnName, eventType, optional) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(errorPrefix(fnName, 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n  }\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass OnDisconnect {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n  }\n  cancel(onComplete) {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 'onComplete', onComplete, true);\n    const result = this._delegate.cancel();\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  remove(onComplete) {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.remove', 'onComplete', onComplete, true);\n    const result = this._delegate.remove();\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  set(value, onComplete) {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateCallback('OnDisconnect.set', 'onComplete', onComplete, true);\n    const result = this._delegate.set(value);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  setWithPriority(value, priority, onComplete) {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateCallback('OnDisconnect.setWithPriority', 'onComplete', onComplete, true);\n    const result = this._delegate.setWithPriority(value, priority);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  update(objectToMerge, onComplete) {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');\n    }\n    validateCallback('OnDisconnect.update', 'onComplete', onComplete, true);\n    const result = this._delegate.update(objectToMerge);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass TransactionResult {\n  /**\r\n   * A type for the resolve value of Firebase.transaction.\r\n   */\n  constructor(committed, snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  }\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON() {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\nclass DataSnapshot {\n  constructor(_database, _delegate) {\n    this._database = _database;\n    this._delegate = _delegate;\n  }\n  /**\r\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n   * empty.\r\n   *\r\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n  val() {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this._delegate.val();\n  }\n  /**\r\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n   * the entire node contents.\r\n   * @returns JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n  exportVal() {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this._delegate.exportVal();\n  }\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON() {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n  /**\r\n   * Returns whether the snapshot contains a non-null value.\r\n   *\r\n   * @returns Whether the snapshot contains a non-null value, or is empty.\r\n   */\n  exists() {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return this._delegate.exists();\n  }\n  /**\r\n   * Returns a DataSnapshot of the specified child node's contents.\r\n   *\r\n   * @param path - Path to a child.\r\n   * @returns DataSnapshot for child node.\r\n   */\n  child(path) {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    path = String(path);\n    _validatePathString('DataSnapshot.child', 'path', path, false);\n    return new DataSnapshot(this._database, this._delegate.child(path));\n  }\n  /**\r\n   * Returns whether the snapshot contains a child at the specified path.\r\n   *\r\n   * @param path - Path to a child.\r\n   * @returns Whether the child exists.\r\n   */\n  hasChild(path) {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    _validatePathString('DataSnapshot.hasChild', 'path', path, false);\n    return this._delegate.hasChild(path);\n  }\n  /**\r\n   * Returns the priority of the object, or null if no priority was set.\r\n   *\r\n   * @returns The priority.\r\n   */\n  getPriority() {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n    return this._delegate.priority;\n  }\n  /**\r\n   * Iterates through child nodes and calls the specified action for each one.\r\n   *\r\n   * @param action - Callback function to be called\r\n   * for each child.\r\n   * @returns True if forEach was canceled by action returning true for\r\n   * one of the child nodes.\r\n   */\n  forEach(action) {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 'action', action, false);\n    return this._delegate.forEach(expDataSnapshot => action(new DataSnapshot(this._database, expDataSnapshot)));\n  }\n  /**\r\n   * Returns whether this DataSnapshot has children.\r\n   * @returns True if the DataSnapshot contains 1 or more child nodes.\r\n   */\n  hasChildren() {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n    return this._delegate.hasChildren();\n  }\n  get key() {\n    return this._delegate.key;\n  }\n  /**\r\n   * Returns the number of children for this DataSnapshot.\r\n   * @returns The number of children that this DataSnapshot contains.\r\n   */\n  numChildren() {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n    return this._delegate.size;\n  }\n  /**\r\n   * @returns The Firebase reference for the location this snapshot's data came\r\n   * from.\r\n   */\n  getRef() {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n    return new Reference(this._database, this._delegate.ref);\n  }\n  get ref() {\n    return this.getRef();\n  }\n}\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\nclass Query {\n  constructor(database, _delegate) {\n    this.database = database;\n    this._delegate = _delegate;\n  }\n  on(eventType, callback, cancelCallbackOrContext, context) {\n    var _a;\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateCallback('Query.on', 'callback', callback, false);\n    const ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\n    const valueCallback = (expSnapshot, previousChildName) => {\n      callback.call(ret.context, new DataSnapshot(this.database, expSnapshot), previousChildName);\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    const cancelCallback = (_a = ret.cancel) === null || _a === void 0 ? void 0 : _a.bind(ret.context);\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback);\n        return callback;\n      default:\n        throw new Error(errorPrefix('Query.on', 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n    }\n  }\n  off(eventType, callback, context) {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', eventType, true);\n    validateCallback('Query.off', 'callback', callback, true);\n    validateContextObject('Query.off', 'context', context, true);\n    if (callback) {\n      const valueCallback = () => {};\n      valueCallback.userCallback = callback;\n      valueCallback.context = context;\n      off(this._delegate, eventType, valueCallback);\n    } else {\n      off(this._delegate, eventType);\n    }\n  }\n  /**\r\n   * Get the server-value for this query, or return a cached value if not connected.\r\n   */\n  get() {\n    return get(this._delegate).then(expSnapshot => {\n      return new DataSnapshot(this.database, expSnapshot);\n    });\n  }\n  /**\r\n   * Attaches a listener, waits for the first event, and then removes the listener\r\n   */\n  once(eventType, callback, failureCallbackOrContext, context) {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateCallback('Query.once', 'callback', callback, true);\n    const ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context);\n    const deferred = new Deferred();\n    const valueCallback = (expSnapshot, previousChildName) => {\n      const result = new DataSnapshot(this.database, expSnapshot);\n      if (callback) {\n        callback.call(ret.context, result, previousChildName);\n      }\n      deferred.resolve(result);\n    };\n    valueCallback.userCallback = callback;\n    valueCallback.context = ret.context;\n    const cancelCallback = error => {\n      if (ret.cancel) {\n        ret.cancel.call(ret.context, error);\n      }\n      deferred.reject(error);\n    };\n    switch (eventType) {\n      case 'value':\n        onValue(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_added':\n        onChildAdded(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_removed':\n        onChildRemoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_changed':\n        onChildChanged(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      case 'child_moved':\n        onChildMoved(this._delegate, valueCallback, cancelCallback, {\n          onlyOnce: true\n        });\n        break;\n      default:\n        throw new Error(errorPrefix('Query.once', 'eventType') + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n    }\n    return deferred.promise;\n  }\n  /**\r\n   * Set a limit and anchor it to the start of the window.\r\n   */\n  limitToFirst(limit) {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToFirst(limit)));\n  }\n  /**\r\n   * Set a limit and anchor it to the end of the window.\r\n   */\n  limitToLast(limit) {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, limitToLast(limit)));\n  }\n  /**\r\n   * Given a child path, return a new query ordered by the specified grandchild path.\r\n   */\n  orderByChild(path) {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByChild(path)));\n  }\n  /**\r\n   * Return a new query ordered by the KeyIndex\r\n   */\n  orderByKey() {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByKey()));\n  }\n  /**\r\n   * Return a new query ordered by the PriorityIndex\r\n   */\n  orderByPriority() {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByPriority()));\n  }\n  /**\r\n   * Return a new query ordered by the ValueIndex\r\n   */\n  orderByValue() {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    return new Query(this.database, query(this._delegate, orderByValue()));\n  }\n  startAt(value = null, name) {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, startAt(value, name)));\n  }\n  startAfter(value = null, name) {\n    validateArgCount('Query.startAfter', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, startAfter(value, name)));\n  }\n  endAt(value = null, name) {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, endAt(value, name)));\n  }\n  endBefore(value = null, name) {\n    validateArgCount('Query.endBefore', 0, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, endBefore(value, name)));\n  }\n  /**\r\n   * Load the selection of children with exactly the specified value, and, optionally,\r\n   * the specified name.\r\n   */\n  equalTo(value, name) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    return new Query(this.database, query(this._delegate, equalTo(value, name)));\n  }\n  /**\r\n   * @returns URL for this location.\r\n   */\n  toString() {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n    return this._delegate.toString();\n  }\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this._delegate.toJSON();\n  }\n  /**\r\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n   */\n  isEqual(other) {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n    return this._delegate.isEqual(other._delegate);\n  }\n  /**\r\n   * Helper used by .on and .once to extract the context and or cancel arguments.\r\n   * @param fnName - The function name (on or once)\r\n   *\r\n   */\n  static getCancelAndContextArgs_(fnName, cancelOrContext, context) {\n    const ret = {\n      cancel: undefined,\n      context: undefined\n    };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext;\n      validateCallback(fnName, 'cancel', ret.cancel, true);\n      ret.context = context;\n      validateContextObject(fnName, 'context', ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext;\n      } else {\n        throw new Error(errorPrefix(fnName, 'cancelOrContext') + ' must either be a cancel callback or a context object.');\n      }\n    }\n    return ret;\n  }\n  get ref() {\n    return new Reference(this.database, new _ReferenceImpl(this._delegate._repo, this._delegate._path));\n  }\n}\nclass Reference extends Query {\n  /**\r\n   * Call options:\r\n   *   new Reference(Repo, Path) or\r\n   *   new Reference(url: string, string|RepoManager)\r\n   *\r\n   * Externally - this is the firebase.database.Reference type.\r\n   */\n  constructor(database, _delegate) {\n    super(database, new _QueryImpl(_delegate._repo, _delegate._path, new _QueryParams(), false));\n    this.database = database;\n    this._delegate = _delegate;\n  }\n  /** @returns {?string} */\n  getKey() {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n    return this._delegate.key;\n  }\n  child(pathString) {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    }\n    return new Reference(this.database, child(this._delegate, pathString));\n  }\n  /** @returns {?Reference} */\n  getParent() {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n    const parent = this._delegate.parent;\n    return parent ? new Reference(this.database, parent) : null;\n  }\n  /** @returns {!Reference} */\n  getRoot() {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n    return new Reference(this.database, this._delegate.root);\n  }\n  set(newVal, onComplete) {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateCallback('Reference.set', 'onComplete', onComplete, true);\n    const result = set(this._delegate, newVal);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  update(values, onComplete) {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    if (Array.isArray(values)) {\n      const newObjectToMerge = {};\n      for (let i = 0; i < values.length; ++i) {\n        newObjectToMerge['' + i] = values[i];\n      }\n      values = newObjectToMerge;\n      warn('Passing an Array to Firebase.update() is deprecated. ' + 'Use set() if you want to overwrite the existing data, or ' + 'an Object with integer keys if you really do want to ' + 'only update some of the children.');\n    }\n    _validateWritablePath('Reference.update', this._delegate._path);\n    validateCallback('Reference.update', 'onComplete', onComplete, true);\n    const result = update(this._delegate, values);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  setWithPriority(newVal, newPriority, onComplete) {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateCallback('Reference.setWithPriority', 'onComplete', onComplete, true);\n    const result = setWithPriority(this._delegate, newVal, newPriority);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  remove(onComplete) {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateCallback('Reference.remove', 'onComplete', onComplete, true);\n    const result = remove(this._delegate);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  transaction(transactionUpdate, onComplete, applyLocally) {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateCallback('Reference.transaction', 'transactionUpdate', transactionUpdate, false);\n    validateCallback('Reference.transaction', 'onComplete', onComplete, true);\n    validateBoolean('Reference.transaction', 'applyLocally', applyLocally, true);\n    const result = runTransaction(this._delegate, transactionUpdate, {\n      applyLocally\n    }).then(transactionResult => new TransactionResult(transactionResult.committed, new DataSnapshot(this.database, transactionResult.snapshot)));\n    if (onComplete) {\n      result.then(transactionResult => onComplete(null, transactionResult.committed, transactionResult.snapshot), error => onComplete(error, false, null));\n    }\n    return result;\n  }\n  setPriority(priority, onComplete) {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateCallback('Reference.setPriority', 'onComplete', onComplete, true);\n    const result = setPriority(this._delegate, priority);\n    if (onComplete) {\n      result.then(() => onComplete(null), error => onComplete(error));\n    }\n    return result;\n  }\n  push(value, onComplete) {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateCallback('Reference.push', 'onComplete', onComplete, true);\n    const expPromise = push(this._delegate, value);\n    const promise = expPromise.then(expRef => new Reference(this.database, expRef));\n    if (onComplete) {\n      promise.then(() => onComplete(null), error => onComplete(error));\n    }\n    const result = new Reference(this.database, expPromise);\n    result.then = promise.then.bind(promise);\n    result.catch = promise.catch.bind(promise, undefined);\n    return result;\n  }\n  onDisconnect() {\n    _validateWritablePath('Reference.onDisconnect', this._delegate._path);\n    return new OnDisconnect(new OnDisconnect$1(this._delegate._repo, this._delegate._path));\n  }\n  get key() {\n    return this.getKey();\n  }\n  get parent() {\n    return this.getParent();\n  }\n  get root() {\n    return this.getRoot();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Class representing a firebase database.\r\n */\nclass Database {\n  /**\r\n   * The constructor should not be called by users of our public API.\r\n   */\n  constructor(_delegate, app) {\n    this._delegate = _delegate;\n    this.app = app;\n    this.INTERNAL = {\n      delete: () => this._delegate._delete(),\n      forceWebSockets,\n      forceLongPolling\n    };\n  }\n  /**\r\n   * Modify this instance to communicate with the Realtime Database emulator.\r\n   *\r\n   * <p>Note: This method must be called before performing any other operation.\r\n   *\r\n   * @param host - the emulator host (ex: localhost)\r\n   * @param port - the emulator port (ex: 8080)\r\n   * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n   */\n  useEmulator(host, port, options = {}) {\n    connectDatabaseEmulator(this._delegate, host, port, options);\n  }\n  ref(path) {\n    validateArgCount('database.ref', 0, 1, arguments.length);\n    if (path instanceof Reference) {\n      const childRef = refFromURL(this._delegate, path.toString());\n      return new Reference(this, childRef);\n    } else {\n      const childRef = ref(this._delegate, path);\n      return new Reference(this, childRef);\n    }\n  }\n  /**\r\n   * Returns a reference to the root or the path specified in url.\r\n   * We throw a exception if the url is not in the same domain as the\r\n   * current repo.\r\n   * @returns Firebase reference.\r\n   */\n  refFromURL(url) {\n    const apiName = 'database.refFromURL';\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const childRef = refFromURL(this._delegate, url);\n    return new Reference(this, childRef);\n  }\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    return goOffline(this._delegate);\n  }\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    return goOnline(this._delegate);\n  }\n}\nDatabase.ServerValue = {\n  TIMESTAMP: serverTimestamp(),\n  increment: delta => increment(delta)\n};\n\n/**\r\n * Used by console to create a database based on the app,\r\n * passed database URL and a custom auth implementation.\r\n *\r\n * @param app - A valid FirebaseApp-like object\r\n * @param url - A valid Firebase databaseURL\r\n * @param version - custom version e.g. firebase-admin version\r\n * @param customAuthImpl - custom auth implementation\r\n */\nfunction initStandalone({\n  app,\n  url,\n  version,\n  customAuthImpl,\n  customAppCheckImpl,\n  namespace,\n  nodeAdmin = false\n}) {\n  _setSDKVersion(version);\n  const container = new ComponentContainer('database-standalone');\n  /**\r\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\r\n   * any actual function.\r\n   */\n  const authProvider = new Provider('auth-internal', container);\n  authProvider.setComponent(new Component('auth-internal', () => customAuthImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  let appCheckProvider = undefined;\n  if (customAppCheckImpl) {\n    appCheckProvider = new Provider('app-check-internal', container);\n    appCheckProvider.setComponent(new Component('app-check-internal', () => customAppCheckImpl, \"PRIVATE\" /* ComponentType.PRIVATE */));\n  }\n  return {\n    instance: new Database(_repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin), app),\n    namespace\n  };\n}\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  initStandalone: initStandalone\n});\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst ServerValue = Database.ServerValue;\nfunction registerDatabase(instance) {\n  // Register the Database Service with the 'firebase' namespace.\n  instance.INTERNAL.registerComponent(new Component('database-compat', (container, {\n    instanceIdentifier: url\n  }) => {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app-compat').getImmediate();\n    const databaseExp = container.getProvider('database').getImmediate({\n      identifier: url\n    });\n    return new Database(databaseExp, app);\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */).setServiceProps(\n  // firebase.database namespace properties\n  {\n    Reference,\n    Query,\n    Database,\n    DataSnapshot,\n    enableLogging,\n    INTERNAL,\n    ServerValue\n  }).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\nregisterDatabase(firebase);\nexport { registerDatabase };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport * as i1 from '@angular/fire';\nimport { keepUnstableUntilFirst, VERSION } from '@angular/fire';\nimport * as i3 from '@angular/fire/app-check';\nimport { ɵfirebaseAppFactory as _firebaseAppFactory, ɵcacheInstance as _cacheInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire/compat';\nimport * as i2 from '@angular/fire/compat/auth';\nimport { ɵauthFactory as _authFactory, USE_EMULATOR as USE_EMULATOR$1, SETTINGS, TENANT_ID, LANGUAGE_CODE, USE_DEVICE_LANGUAGE, PERSISTENCE } from '@angular/fire/compat/auth';\nimport { map, share, scan, withLatestFrom, skipWhile, switchMap, distinctUntilChanged } from 'rxjs/operators';\nimport { Observable, asyncScheduler, merge, of } from 'rxjs';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/database';\nimport firebase from 'firebase/compat/app';\n\n/**\n * Create an observable from a Database Reference or Database Query.\n * @param ref Database Reference\n * @param event Listen event type ('value', 'added', 'changed', 'removed', 'moved')\n * @param listenType 'on' or 'once'\n * @param scheduler - Rxjs scheduler\n */\nfunction fromRef(ref, event, listenType = 'on', scheduler = asyncScheduler) {\n  return new Observable(subscriber => {\n    let fn = null;\n    fn = ref[listenType](event, (snapshot, prevKey) => {\n      scheduler.schedule(() => {\n        subscriber.next({\n          snapshot,\n          prevKey\n        });\n      });\n      if (listenType === 'once') {\n        scheduler.schedule(() => subscriber.complete());\n      }\n    }, err => {\n      scheduler.schedule(() => subscriber.error(err));\n    });\n    if (listenType === 'on') {\n      return {\n        unsubscribe() {\n          if (fn != null) {\n            ref.off(event, fn);\n          }\n        }\n      };\n    } else {\n      return {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        unsubscribe() {}\n      };\n    }\n  }).pipe(map(payload => {\n    const {\n      snapshot,\n      prevKey\n    } = payload;\n    let key = null;\n    if (snapshot.exists()) {\n      key = snapshot.key;\n    }\n    return {\n      type: event,\n      payload: snapshot,\n      prevKey,\n      key\n    };\n  }), share());\n}\nfunction isString(value) {\n  return typeof value === 'string';\n}\nfunction isFirebaseDataSnapshot(value) {\n  return typeof value.exportVal === 'function';\n}\nfunction isNil(obj) {\n  return obj === undefined || obj === null;\n}\nfunction isFirebaseRef(value) {\n  return typeof value.set === 'function';\n}\n/**\n * Returns a database reference given a Firebase App and an\n * absolute or relative path.\n * @param database - Firebase Database\n * @param pathRef - Database path, relative or absolute\n */\nfunction getRef(database, pathRef) {\n  // if a db ref was passed in, just return it\n  return isFirebaseRef(pathRef) ? pathRef : database.ref(pathRef);\n}\nfunction checkOperationCases(item, cases) {\n  if (isString(item)) {\n    return cases.stringCase();\n  } else if (isFirebaseRef(item)) {\n    return cases.firebaseCase();\n  } else if (isFirebaseDataSnapshot(item)) {\n    return cases.snapshotCase();\n  }\n  throw new Error(`Expects a string, snapshot, or reference. Got: ${typeof item}`);\n}\nfunction validateEventsArray(events) {\n  if (isNil(events) || events.length === 0) {\n    events = ['child_added', 'child_removed', 'child_changed', 'child_moved'];\n  }\n  return events;\n}\nfunction stateChanges(query, events, scheduler) {\n  events = validateEventsArray(events);\n  const childEvent$ = events.map(event => fromRef(query, event, 'on', scheduler));\n  return merge(...childEvent$);\n}\nfunction auditTrail(query, events, scheduler) {\n  const auditTrail$ = stateChanges(query, events).pipe(scan((current, action) => [...current, action], []));\n  return waitForLoaded(query, auditTrail$, scheduler);\n}\nfunction loadedData(query, scheduler) {\n  // Create an observable of loaded values to retrieve the\n  // known dataset. This will allow us to know what key to\n  // emit the \"whole\" array at when listening for child events.\n  return fromRef(query, 'value', 'on', scheduler).pipe(map(data => {\n    // Store the last key in the data set\n    let lastKeyToLoad;\n    // Loop through loaded dataset to find the last key\n    data.payload.forEach(child => {\n      lastKeyToLoad = child.key;\n      return false;\n    });\n    // return data set and the current last key loaded\n    return {\n      data,\n      lastKeyToLoad\n    };\n  }));\n}\nfunction waitForLoaded(query, action$, scheduler) {\n  const loaded$ = loadedData(query, scheduler);\n  return loaded$.pipe(withLatestFrom(action$),\n  // Get the latest values from the \"loaded\" and \"child\" datasets\n  // We can use both datasets to form an array of the latest values.\n  map(([loaded, actions]) => {\n    // Store the last key in the data set\n    const lastKeyToLoad = loaded.lastKeyToLoad;\n    // Store all child keys loaded at this point\n    const loadedKeys = actions.map(snap => snap.key);\n    return {\n      actions,\n      lastKeyToLoad,\n      loadedKeys\n    };\n  }),\n  // This is the magical part, only emit when the last load key\n  // in the dataset has been loaded by a child event. At this point\n  // we can assume the dataset is \"whole\".\n  skipWhile(meta => meta.loadedKeys.indexOf(meta.lastKeyToLoad) === -1),\n  // Pluck off the meta data because the user only cares\n  // to iterate through the snapshots\n  map(meta => meta.actions));\n}\nfunction createDataOperationMethod(ref, operation) {\n  return function dataOperation(item, value) {\n    return checkOperationCases(item, {\n      stringCase: () => ref.child(item)[operation](value),\n      firebaseCase: () => item[operation](value),\n      snapshotCase: () => item.ref[operation](value)\n    });\n  };\n}\n\n// TODO(davideast): Find out why TS thinks this returns firebase.Primise\n// instead of Promise.\nfunction createRemoveMethod(ref) {\n  return function remove(item) {\n    if (!item) {\n      return ref.remove();\n    }\n    return checkOperationCases(item, {\n      stringCase: () => ref.child(item).remove(),\n      firebaseCase: () => item.remove(),\n      snapshotCase: () => item.ref.remove()\n    });\n  };\n}\nfunction listChanges(ref, events, scheduler) {\n  return fromRef(ref, 'value', 'once', scheduler).pipe(switchMap(snapshotAction => {\n    const childEvent$ = [of(snapshotAction)];\n    events.forEach(event => childEvent$.push(fromRef(ref, event, 'on', scheduler)));\n    return merge(...childEvent$).pipe(scan(buildView, []));\n  }), distinctUntilChanged());\n}\nfunction positionFor(changes, key) {\n  const len = changes.length;\n  for (let i = 0; i < len; i++) {\n    if (changes[i].payload.key === key) {\n      return i;\n    }\n  }\n  return -1;\n}\nfunction positionAfter(changes, prevKey) {\n  if (isNil(prevKey)) {\n    return 0;\n  } else {\n    const i = positionFor(changes, prevKey);\n    if (i === -1) {\n      return changes.length;\n    } else {\n      return i + 1;\n    }\n  }\n}\nfunction buildView(current, action) {\n  const {\n    payload,\n    prevKey,\n    key\n  } = action;\n  const currentKeyPosition = positionFor(current, key);\n  const afterPreviousKeyPosition = positionAfter(current, prevKey);\n  switch (action.type) {\n    case 'value':\n      if (action.payload?.exists()) {\n        let prevKey = null;\n        action.payload.forEach(payload => {\n          const action = {\n            payload,\n            type: 'value',\n            prevKey,\n            key: payload.key\n          };\n          prevKey = payload.key;\n          current = [...current, action];\n          return false;\n        });\n      }\n      return current;\n    case 'child_added':\n      if (currentKeyPosition > -1) {\n        // check that the previouskey is what we expect, else reorder\n        const previous = current[currentKeyPosition - 1];\n        if ((previous?.key || null) !== prevKey) {\n          current = current.filter(x => x.payload.key !== payload.key);\n          current.splice(afterPreviousKeyPosition, 0, action);\n        }\n      } else if (prevKey == null) {\n        return [action, ...current];\n      } else {\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, action);\n      }\n      return current;\n    case 'child_removed':\n      return current.filter(x => x.payload.key !== payload.key);\n    case 'child_changed':\n      return current.map(x => x.payload.key === key ? action : x);\n    case 'child_moved':\n      if (currentKeyPosition > -1) {\n        const data = current.splice(currentKeyPosition, 1)[0];\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, data);\n        return current;\n      }\n      return current;\n    // default will also remove null results\n    default:\n      return current;\n  }\n}\nfunction snapshotChanges(query, events, scheduler) {\n  events = validateEventsArray(events);\n  return listChanges(query, events, scheduler);\n}\nfunction createListReference(query, afDatabase) {\n  const outsideAngularScheduler = afDatabase.schedulers.outsideAngular;\n  const refInZone = afDatabase.schedulers.ngZone.run(() => query.ref);\n  return {\n    query,\n    update: createDataOperationMethod(refInZone, 'update'),\n    set: createDataOperationMethod(refInZone, 'set'),\n    push: data => refInZone.push(data),\n    remove: createRemoveMethod(refInZone),\n    snapshotChanges(events) {\n      return snapshotChanges(query, events, outsideAngularScheduler).pipe(keepUnstableUntilFirst);\n    },\n    stateChanges(events) {\n      return stateChanges(query, events, outsideAngularScheduler).pipe(keepUnstableUntilFirst);\n    },\n    auditTrail(events) {\n      return auditTrail(query, events, outsideAngularScheduler).pipe(keepUnstableUntilFirst);\n    },\n    valueChanges(events, options) {\n      const snapshotChanges$ = snapshotChanges(query, events, outsideAngularScheduler);\n      return snapshotChanges$.pipe(map(actions => actions.map(a => {\n        if (options && options.idField) {\n          return {\n            ...a.payload.val(),\n            ...{\n              [options.idField]: a.key\n            }\n          };\n        } else {\n          return a.payload.val();\n        }\n      })), keepUnstableUntilFirst);\n    }\n  };\n}\nfunction createObjectSnapshotChanges(query, scheduler) {\n  return function snapshotChanges() {\n    return fromRef(query, 'value', 'on', scheduler);\n  };\n}\nfunction createObjectReference(query, afDatabase) {\n  return {\n    query,\n    snapshotChanges() {\n      return createObjectSnapshotChanges(query, afDatabase.schedulers.outsideAngular)().pipe(keepUnstableUntilFirst);\n    },\n    update(data) {\n      return query.ref.update(data);\n    },\n    set(data) {\n      return query.ref.set(data);\n    },\n    remove() {\n      return query.ref.remove();\n    },\n    valueChanges() {\n      const snapshotChanges$ = createObjectSnapshotChanges(query, afDatabase.schedulers.outsideAngular)();\n      return snapshotChanges$.pipe(keepUnstableUntilFirst, map(action => action.payload.exists() ? action.payload.val() : null));\n    }\n  };\n}\nconst URL = /*#__PURE__*/new InjectionToken('angularfire2.realtimeDatabaseURL');\nconst USE_EMULATOR = /*#__PURE__*/new InjectionToken('angularfire2.database.use-emulator');\nlet AngularFireDatabase = /*#__PURE__*/(() => {\n  class AngularFireDatabase {\n    schedulers;\n    database;\n    constructor(options, name, databaseURL,\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    platformId, zone, schedulers, _useEmulator,\n    // tuple isn't working here\n    auth, useAuthEmulator, authSettings,\n    // can't use firebase.auth.AuthSettings here\n    tenantId, languageCode, useDeviceLanguage, persistence, _appCheckInstances) {\n      this.schedulers = schedulers;\n      const useEmulator = _useEmulator;\n      const app = _firebaseAppFactory(options, zone, name);\n      if (auth) {\n        _authFactory(app, zone, useAuthEmulator, tenantId, languageCode, useDeviceLanguage, authSettings, persistence);\n      }\n      this.database = _cacheInstance(`${app.name}.database.${databaseURL}`, 'AngularFireDatabase', app.name, () => {\n        const database = zone.runOutsideAngular(() => app.database(databaseURL || undefined));\n        if (useEmulator) {\n          database.useEmulator(...useEmulator);\n        }\n        return database;\n      }, [useEmulator]);\n    }\n    list(pathOrRef, queryFn) {\n      const ref = this.schedulers.ngZone.runOutsideAngular(() => getRef(this.database, pathOrRef));\n      let query = ref;\n      if (queryFn) {\n        query = queryFn(ref);\n      }\n      return createListReference(query, this);\n    }\n    object(pathOrRef) {\n      const ref = this.schedulers.ngZone.runOutsideAngular(() => getRef(this.database, pathOrRef));\n      return createObjectReference(ref, this);\n    }\n    createPushId() {\n      const ref = this.schedulers.ngZone.runOutsideAngular(() => this.database.ref());\n      return ref.push().key;\n    }\n    static ɵfac = function AngularFireDatabase_Factory(t) {\n      return new (t || AngularFireDatabase)(i0.ɵɵinject(FIREBASE_OPTIONS), i0.ɵɵinject(FIREBASE_APP_NAME, 8), i0.ɵɵinject(URL, 8), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ɵAngularFireSchedulers), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(i2.AngularFireAuth, 8), i0.ɵɵinject(USE_EMULATOR$1, 8), i0.ɵɵinject(SETTINGS, 8), i0.ɵɵinject(TENANT_ID, 8), i0.ɵɵinject(LANGUAGE_CODE, 8), i0.ɵɵinject(USE_DEVICE_LANGUAGE, 8), i0.ɵɵinject(PERSISTENCE, 8), i0.ɵɵinject(i3.AppCheckInstances, 8));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: AngularFireDatabase,\n      factory: AngularFireDatabase.ɵfac,\n      providedIn: 'any'\n    });\n  }\n  return AngularFireDatabase;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet AngularFireDatabaseModule = /*#__PURE__*/(() => {\n  class AngularFireDatabaseModule {\n    constructor() {\n      firebase.registerVersion('angularfire', VERSION.full, 'rtdb-compat');\n    }\n    static ɵfac = function AngularFireDatabaseModule_Factory(t) {\n      return new (t || AngularFireDatabaseModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: AngularFireDatabaseModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [AngularFireDatabase]\n    });\n  }\n  return AngularFireDatabaseModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFireDatabase, AngularFireDatabaseModule, URL, USE_EMULATOR, auditTrail, createListReference, fromRef, listChanges, snapshotChanges, stateChanges };\n"],"mappings":"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","names":["name","version","SDK_VERSION","setSDKVersion","DOMStorageWrapper","domStorage_","key","value","stringify","storedVal","jsonEval","MemoryStorage","contains","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","sha1Bytes","base64","buildLogMessage_","varArgs","message","i","arg","logger","firstLog_","enableLogging$1","logger_","persistent","assert","LogLevel","log","logWrapper","prefix","error","fatal","warn","warnIfPageIsSecure","isInvalidJSONNumber","data","executeWhenDOMReady","fn","isNodeSdk","called","wrappedFn","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","splitStringBySize","segsize","len","dataSegs","c","each","doubleToIEEE754String","v","ebits","fbits","bias","s","e","f","ln","bits","hexByteString","hexByte","isChromeExtensionContentScript","isWindowsStoreApp","errorForServerCode","code","query","reason","INTEGER_REGEXP_","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","setTimeoutNonBlocking","time","timeout","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","forceRefresh","resolve","reject","listener","_a","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth","errorMessage","EmulatorTokenProvider","accessToken","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","isUsingEmulator","newHost","protocol","repoInfoNeedsQueryParam","repoInfo","repoInfoConnectionURL","type","params","connURL","pairs","StatsCollection","amount","deepCopy","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","responseNum","callback","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","_BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","onMessage","onDisconnect","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","pN","urlParams","connectURL","dataStr","base64data","base64Encode","pw","bytesReceived","_FirebaseIFrameScriptHolder","commandCB","onMessageCB","urlFn","script","iframeContents","iframe","domain","theURL","curDataString","theSeg","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","readyStateCB","loadCB","newScript","rstate","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","WebSocketConnection","options","device","env","proxy","m","isOldAndroid","oldAndroidRegex","oldAndroidMatch","fullMess","jsonMess","frameCount","mess","remainingData","TransportManager","isWebSocketsAvailable","isSkipPollConnection","transports","transport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onDisconnect_","onKill_","conn","onMessageReceived","onConnectionLost","healthyTimeoutMS","everConnected","dataMsg","msg","controlData","cmd","parsedData","layer","payload","handshakePayload","handshake","timestamp","ServerActions","pathString","onComplete","hash","token","stats","EventEmitter","allowedEvents_","eventType","listeners","context","eventData","et","OnlineMonitor","_OnlineMonitor","isMobileCordova","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","copyTo","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","pathSlice","begin","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","j","pathContains","ValidationPath","errorPrefix_","stringLength","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","validationPathToErrorString","VisibilityMonitor","_VisibilityMonitor","hidden","visibilityChange","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","action","body","onResponse","curReqNum","deferred","Deferred","outstandingGet","index","currentHashFn","tag","queryId","listenSpec","get","req","status","warnings","safeGet","indexSpec","indexPath","credential","isAdmin","authMethod","isValidFormat","requestData","res","queryObj","request","response","result","errorReason","reqNum","sessionId","online","timeSinceLastConnectAttempt","reconnectDelay","__async","onDataMessage","onReady","canceled","connection","closeFn","sendRequestFn","isEmpty","delta","put","q","listen","normalizedPathString","map","statusCode","explanation","queries","clientName","isReactNative","NamedNode","_NamedNode","node","Index","oldNode","newNode","oldWrapped","newWrapped","__EMPTY_NODE","KeyIndex","val","assertionError","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","LLRBNode","color","SortedMap","n","smallest","nl","nr","blackDepth","LLRBEmptyNode","_SortedMap","comparator_","root_","rightParent","resultGenerator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","setMaxNode$1","priorityHashText","priority","validatePriorityNode","priorityNode","__childrenNodeConstructor","LeafNode","value_","priorityNode_","newPriorityNode","childName","childNode","newChildNode","front","exportFormat","toHash","otherLeaf","otherLeafType","thisLeafType","otherIndex","thisIndex","nodeFromJSON$1","MAX_NODE$1","setNodeFromJSON","setMaxNode","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","LOG_2","Base12Num","length","logBase2","num","bitMask","mask","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","_IndexMap","indexes_","indexSet_","indexKey","sortedMap","indexDefinition","existingChildren","sawIndexedValue","iter","next","newIndex","indexName","newIndexSet","newIndexes","indexedChildren","existingSnap","newChildren","EMPTY_NODE","ChildrenNode","children_","indexMap_","newIndexMap","newPriority","newImmediateChild","numKeys","maxKey","allIntegerKeys","array","childHash","idx","predecessor","minKey","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","USE_HINZE","nodeFromJSON","json","jsonLeaf","children","childrenHavePriority","childSet","sortedChildSet","childData","PathIndex","indexPath_","snap","aChild","bChild","valueNode","ValueIndex","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","source","optChangeAccumulator","oldChild","newSnap","RangedFilter","_RangedFilter","isWithinStart","isWithinEnd","filtered","self","startName","endName","LimitedFilter","compareRes","count","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","inRange","oldChildSnap","nextChild","compareNext","newEventCache","QueryParams","_QueryParams","copy","queryParamsGetNodeFilter","queryParams","queryParamsLimitToFirst","newLimit","newParams","queryParamsLimitToLast","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsOrderBy","queryParamsToRestQueryStringParameters","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","_ReadonlyRestClient","listenId","thisListen","queryStringParameters","querystring","xhr","SnapshotHolder","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","sparseSnapshotTreeForget","tree","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","StatsListener","collection_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","reportedStats","haveStatsToReport","OperationType","newOperationSourceUser","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","_AckUserWrite","affectedTree","revert","ListenComplete","_ListenComplete","Overwrite","_Overwrite","Merge","_Merge","CacheNode","node_","fullyInitialized_","filtered_","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","eventGeneratorGenerateEventsForType","registrations","filteredChanges","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","_ImmutableTree","childPath","relativePath","predicate","childExistingPathAndValue","toSet","newTree","pathSoFar","accum","pathToFollow","currentRelativePath","CompoundWrite","_CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","subtree","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","writeTreeAddMerge","changedChildren","writeTreeGetWrite","record","writeTreeRemoveWrite","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","write","writes","filter","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","layeredCache","merge","mergeAtPath","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","reverse","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","oldChange","oldType","NoCompleteChildSource_","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorRevertUserWrite","viewProcessorAckUserWrite","viewProcessorListenComplete","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","viewProcessorCacheHasChild","curViewCache","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","indexFilter","initialServerCache","initialEventCache","viewGetServerCache","view","viewGetCompleteNode","viewGetCompleteServerCache","cache","viewIsEmpty","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","remaining","existing","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","referenceConstructor$1","SyncPoint","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","referenceConstructor","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncTreeApplyUserOverwrite","syncTree","newData","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","syncTreeAckUserWrite","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","r","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","syncTreeQueryForListening_","syncTreeTagForQuery","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeGetServerValue","serverCacheNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","splitIndex","maybeChildSyncPoint","childMap","views","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","_ExistingValueProvider","DeferredValueProvider","_DeferredValueProvider","generateWithValues","values","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","fnName","optional","validateFirebaseData","errorPrefix","path_","hasDotValue","hasActualChild","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","errorPrefix$1","validatePriority","validateKey","argumentName","validatePathString","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","EventQueue","eventQueueQueueEvents","eventQueue","eventDataList","currList","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoOnServerInfoUpdate","infoEvents","repoUpdateInfo","repoServerTime","offset","repoGenerateServerValues","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoGetValue","cached","err","repoLog","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","empty","changedKey","changedValue","resolvedOnDisconnectTree","resolved","repoOnDisconnectCancel","repoOnDisconnectSet","repoOnDisconnectSetWithPriority","repoOnDisconnectUpdate","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoResume","repoStartTransaction","transactionUpdate","unwatcher","applyLocally","transaction","currentState","repoGetLatestState","queueNode","nodeQueue","priorityForNode","repoSendReadyTransactions","excludeSets","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","repoSendTransactionQueue","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","callbacks","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","abortTransaction","abortReason","currentNode","newDataNode","oldWriteId","newNodeResolved","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","to","from","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeQuery","queryString","results","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","subdomain","scheme","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","DataEvent","snapshot","prevName","ref","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","expDataSnapshot","previousChildName","OnDisconnect","_repo","_path","QueryImpl","_QueryImpl","_queryParams","_orderByCalled","ReferenceImpl","getModularInstance","sameRepo","samePath","sameQueryIdentifier","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","_ReferenceImpl","parentPath","DataSnapshot","_DataSnapshot","_node","_index","childRef","db","refFromURL","parsedURL","push","parent","value","getModularInstance","validateWritablePath","validateFirebaseDataArg","now","repoServerTime","name","nextPushId","thennablePushRef","child","pushRef","promise","set","remove","ref","deferred","Deferred","repoSetWithPriority","setPriority","priority","validatePriority","pathChild","setWithPriority","update","values","validateFirebaseMergeDataArg","repoUpdate","get","query","callbackContext","CallbackContext","container","ValueEventRegistration","repoGetValue","node","DataSnapshot","ReferenceImpl","_ValueEventRegistration","eventType","change","index","DataEvent","eventData","error","path","CancelEvent","other","ChildEventRegistration","_ChildEventRegistration","eventToCheck","assert","childRef","addEventListener","callback","cancelCallbackOrListenOptions","options","cancelCallback","userCallback","onceCallback","dataSnapshot","previousChildName","repoRemoveEventCallbackForQuery","repoAddEventCallbackForQuery","onValue","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","off","expCallback","QueryConstraint","QueryEndAtConstraint","_value","_key","newParams","queryParamsEndAt","validateLimit","validateQueryEndpoints","QueryImpl","endAt","key","validateKey","QueryEndBeforeConstraint","queryParamsEndBefore","endBefore","QueryStartAtConstraint","queryParamsStartAt","startAt","QueryStartAfterConstraint","queryParamsStartAfter","startAfter","QueryLimitToFirstConstraint","_limit","queryParamsLimitToFirst","limitToFirst","limit","QueryLimitToLastConstraint","queryParamsLimitToLast","limitToLast","QueryOrderByChildConstraint","_path","validateNoPreviousOrderByCall","parsedPath","Path","pathIsEmpty","PathIndex","queryParamsOrderBy","orderByChild","validatePathString","QueryOrderByKeyConstraint","KEY_INDEX","orderByKey","QueryOrderByPriorityConstraint","PRIORITY_INDEX","orderByPriority","QueryOrderByValueConstraint","VALUE_INDEX","orderByValue","QueryEqualToValueConstraint","equalTo","queryConstraints","queryImpl","constraint","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","repo","host","port","tokenProvider","RepoInfo","repoManagerDatabaseFromApp","app","authProvider","appCheckProvider","url","nodeAdmin","dbUrl","fatal","log","parsedUrl","parseRepoInfo","repoInfo","isEmulator","dbEmulatorHost","authTokenProvider","EmulatorTokenProvider","FirebaseAuthTokenProvider","validateUrl","repoManagerCreateRepo","AppCheckTokenProvider","Database","repoManagerDeleteRepo","appName","appRepos","repoInterrupt","Repo","Database","_repoInternal","app","repoStart","ReferenceImpl","newEmptyPath","repoManagerDeleteRepo","apiName","fatal","checkTransportInit","TransportManager","warn","forceWebSockets","BrowserPollConnection","forceLongPolling","WebSocketConnection","getDatabase","getApp","url","db","_getProvider","emulator","getDefaultEmulatorHostnameAndPort","connectDatabaseEmulator","host","port","options","getModularInstance","repo","tokenProvider","EmulatorTokenProvider","token","createMockUserToken","repoManagerApplyEmulatorSettings","goOffline","repoInterrupt","goOnline","repoResume","enableLogging","logger","persistent","enableLogging$1","registerDatabase","variant","setSDKVersion","SDK_VERSION","_registerComponent","Component","container","authProvider","appCheckProvider","repoManagerDatabaseFromApp","registerVersion","name","version","SERVER_TIMESTAMP","serverTimestamp","increment","delta","TransactionResult","committed","snapshot","runTransaction","ref","transactionUpdate","_a","validateWritablePath","applyLocally","deferred","Deferred","promiseComplete","error","node","dataSnapshot","DataSnapshot","PRIORITY_INDEX","unwatcher","onValue","repoStartTransaction","PersistentConnection","pathString","onComplete","data","onEcho","registerDatabase","name","version","logClient","Logger","warn","msg","message","validateBoolean","fnName","argumentName","bool","optional","errorPrefix","validateEventType","eventType","OnDisconnect","_delegate","onComplete","validateArgCount","validateCallback","result","error","value","priority","objectToMerge","newObjectToMerge","i","TransactionResult","committed","snapshot","DataSnapshot","_DataSnapshot","_database","path","validatePathString","action","expDataSnapshot","Reference","Query","_Query","database","callback","cancelCallbackOrContext","context","_a","ret","valueCallback","expSnapshot","previousChildName","cancelCallback","onValue","onChildAdded","onChildRemoved","onChildChanged","onChildMoved","validateContextObject","off","get","failureCallbackOrContext","deferred","Deferred","limit","query","limitToFirst","limitToLast","orderByChild","orderByKey","orderByPriority","orderByValue","startAt","startAfter","endAt","endBefore","equalTo","other","cancelOrContext","ReferenceImpl","_Reference","QueryImpl","QueryParams","pathString","child","parent","newVal","set","values","validateWritablePath","update","newPriority","setWithPriority","remove","transactionUpdate","applyLocally","runTransaction","transactionResult","setPriority","expPromise","push","promise","expRef","Database","app","forceWebSockets","forceLongPolling","host","port","options","connectDatabaseEmulator","childRef","refFromURL","ref","url","goOffline","goOnline","serverTimestamp","delta","increment","initStandalone","customAuthImpl","customAppCheckImpl","namespace","nodeAdmin","setSDKVersion","container","ComponentContainer","authProvider","Provider","Component","appCheckProvider","repoManagerDatabaseFromApp","INTERNAL","ServerValue","registerDatabase","instance","databaseExp","enableLogging","firebase","fromRef","ref","event","listenType","scheduler","asyncScheduler","Observable","subscriber","fn","snapshot","prevKey","err","map","payload","key","share","isString","value","isFirebaseDataSnapshot","isNil","obj","isFirebaseRef","getRef","database","pathRef","checkOperationCases","item","cases","validateEventsArray","events","stateChanges","query","childEvent$","merge","auditTrail","auditTrail$","scan","current","action","waitForLoaded","loadedData","data","lastKeyToLoad","child","action$","withLatestFrom","loaded","actions","loadedKeys","snap","skipWhile","meta","createDataOperationMethod","operation","createRemoveMethod","listChanges","switchMap","snapshotAction","of","buildView","distinctUntilChanged","positionFor","changes","len","i","positionAfter","currentKeyPosition","afterPreviousKeyPosition","x","snapshotChanges","createListReference","afDatabase","outsideAngularScheduler","refInZone","keepUnstableUntilFirst","options","__spreadProps","__spreadValues","createObjectSnapshotChanges","createObjectReference","URL","InjectionToken","USE_EMULATOR","AngularFireDatabase","name","databaseURL","platformId","zone","schedulers","_useEmulator","auth","useAuthEmulator","authSettings","tenantId","languageCode","useDeviceLanguage","persistence","_appCheckInstances","useEmulator","app","ɵfirebaseAppFactory","ɵauthFactory","ɵcacheInstance","pathOrRef","queryFn","t","ɵɵinject","FIREBASE_OPTIONS","FIREBASE_APP_NAME","PLATFORM_ID","NgZone","ɵAngularFireSchedulers","AngularFireAuth","SETTINGS","TENANT_ID","LANGUAGE_CODE","USE_DEVICE_LANGUAGE","PERSISTENCE","ɵAppCheckInstances","ɵɵdefineInjectable","AngularFireDatabaseModule","firebase","VERSION","ɵɵdefineNgModule","ɵɵdefineInjector"],"x_google_ignoreList":[0,1,2]}