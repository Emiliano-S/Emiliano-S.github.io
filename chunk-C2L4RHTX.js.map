{
  "version": 3,
  "sources": ["src/app/components/unsubscribe/unsubscribe.component.ts", "src/app/components/unsubscribe/unsubscribe.component.html"],
  "sourcesContent": ["import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { UserService } from '../../services/user.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-unsubscribe',\n  templateUrl: './unsubscribe.component.html',\n  styleUrl: './unsubscribe.component.scss'\n})\nexport class UnsubscribeComponent{\n  email: string;\n  successMessage: string;\n  errorMessage: string;\n  loading: boolean = false;\n  unsubForm: FormGroup;\n\n  constructor(private http: HttpClient, private userService: UserService, private fb: FormBuilder) {\n    this.unsubForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n    });\n  }\n\n\n  unsubscribe() {\n    const url = 'https://us-central1-testiq-abc9f.cloudfunctions.net/unsubscribeFromStripe'; // Reemplazar con tu URL real de la función Firebase\n    const payload = { email: this.email };\n    this.loading = true;\n    this.http.post(url, payload)\n      .subscribe(\n        (response: any) => {\n          this.successMessage = '¡Desuscripción exitosa!';\n          this.errorMessage = '';\n          this.loading = false;\n          this.userService.updateSubscriptionStatus(this.email, false)\n          .then(() =>{})\n          .catch(error => console.error('Error updating subscription status in Firebase:', error));\n        },\n        (error) => {\n          console.error('Error al desuscribir', error);\n          this.loading = false;\n          this.successMessage = '';\n          if (error.status === 404) {\n            this.errorMessage = 'No se encontraron suscripciones para este correo electrónico.';\n            this.loading = false;\n          } else {\n            this.errorMessage = 'Algo salió mal. Por favor, inténtalo de nuevo más tarde.';\n            this.loading = false;\n          }\n        }\n      );\n  }\n}\n", "<div class=\"container d-flex justify-content-center align-items-center\">\n  <div class=\"bg-white rounded-4 shadow-sm border-1 p-md-5 p-3 w-md-50 w-100\">\n    <div class=\"w-100\">\n      <div class=\"col-12\">\n        <h2 class=\"fw-bold fs-2\">{{\"unsubscribe.title\" | translate}}</h2>\n        <form [formGroup]=\"unsubForm\" (ngSubmit)=\"unsubscribe()\" class=\"needs-validation mt-3\" novalidate>\n          <div class=\"form-group\">\n            <label for=\"email\" class=\"mb-1\">{{\"unsubscribe.form.label\" | translate}}</label>\n            <input type=\"email\" id=\"email\" name=\"email\" [formControlName]=\"'email'\" [(ngModel)]=\"email\" class=\"form-control\">\n            <div class=\"invalid-feedback\">\n\n            </div>\n          </div>\n          <button type=\"submit\" class=\"btn btn-danger mt-3\" [disabled]=\"unsubForm.invalid\">\n            @if(loading){\n              <span class=\"spinner-border spinner-border-lg mr-1\"></span>\n            }@else(){\n              {{\"unsubscribe.button\" | translate}}\n            }\n          </button>\n        </form>\n        <div *ngIf=\"successMessage\" class=\"alert alert-success mt-3\">\n          {{ successMessage }}\n        </div>\n        <div *ngIf=\"errorMessage\" class=\"alert alert-danger mt-3\">\n          {{ errorMessage }}\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"],
  "mappings": "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",
  "names": ["\u0275\u0275element", "\u0275\u0275text", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "\u0275\u0275elementStart", "\u0275\u0275elementEnd", "\u0275\u0275advance", "ctx_r0", "successMessage", "errorMessage", "UnsubscribeComponent", "constructor", "http", "userService", "fb", "loading", "unsubForm", "group", "email", "Validators", "required", "unsubscribe", "url", "payload", "post", "subscribe", "response", "updateSubscriptionStatus", "then", "catch", "error", "console", "status", "\u0275\u0275directiveInject", "HttpClient", "UserService", "FormBuilder", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "\u0275\u0275template", "UnsubscribeComponent_Conditional_15_Template", "UnsubscribeComponent_Conditional_16_Template", "UnsubscribeComponent_div_17_Template", "UnsubscribeComponent_div_18_Template", "\u0275\u0275textInterpolate", "\u0275\u0275property", "\u0275\u0275twoWayProperty", "invalid", "\u0275\u0275conditional", "_UnsubscribeComponent"]
}
